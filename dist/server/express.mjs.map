{"version":3,"sources":["../../src/utils/env.ts","../../src/db/index.ts","../../src/servers/express.ts","../../src/router/index.ts","../../src/utils/logic/date.ts","../../src/utils/logic/hallencard.ts","../../src/utils/logic/price.ts","../../src/utils/logic/permissions.ts","../../src/utils/logic/taxes.ts","../../src/utils/logic/applicationDialogPermissions.ts","../../src/db/databaseTypes.ts","../../src/authentication/jwt.ts","../../src/authentication/index.ts","../../src/authentication/jwks.ts","../../src/router/routers/area.ts","../../src/router/routers/benefit.ts","../../src/schemes/benefit.ts","../../src/router/routers/controlInterfaces.ts","../../src/schemes/controlInterface.ts","../../src/router/routers/reservation.ts","../../src/schemes/reservation.ts","../../src/utils/ruleCheckPlugins/maxBookingsAtSameTime.ts","../../src/utils/ruleCheckPlugins/maxDuration.ts","../../src/utils/ruleCheckPlugins/maxTimeBefore.ts","../../src/utils/ruleCheckPlugins/minDuration.ts","../../src/utils/ruleCheckPlugins/minTimeBefore.ts","../../src/utils/ruleCheckPlugins/index.ts","../../src/router/routers/transaction.ts","../../src/schemes/transaction.ts","../../src/plugins/paypal-v9.ts","../../src/router/routers/court.ts","../../src/schemes/court.ts","../../src/router/routers/dashboard.ts","../../src/router/routers/eventCategories.ts","../../src/schemes/eventCategories.ts","../../src/router/routers/events.ts","../../src/schemes/event.ts","../../src/router/routers/hallencard.ts","../../src/schemes/hallencard.ts","../../src/router/routers/notification.ts","../../src/schemes/notification.ts","../../src/router/routers/organisationMembers.ts","../../src/schemes/organisationMember.ts","../../src/router/routers/organisations.ts","../../src/schemes/organisation.ts","../../src/router/routers/permission.ts","../../src/router/routers/price.ts","../../src/schemes/price.ts","../../src/router/routers/reservationRule.ts","../../src/schemes/reservationRule.ts","../../src/router/routers/season.ts","../../src/schemes/season.ts","../../src/router/routers/team.ts","../../src/schemes/team.ts","../../src/router/routers/teamSeason.ts","../../src/schemes/teamSeason.ts","../../src/router/routers/user.ts","../../src/schemes/user.ts","../../src/router/routers/userRole.ts","../../src/schemes/userRole.ts","../../src/router/routers/membership.ts","../../src/router/routers/pushNotificationChannels.ts","../../src/router/routers/pushNotifications.ts","../../src/router/routers/pushTokens.ts","../../src/router/routers/index.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport { z } from 'zod';\n\ndotenv.config();\n\nconst envSchema = z.object({\n\tDATABASE_URL: z.string().url(),\n\tPAYPAL_ID: z.string(),\n\tPAYPAL_SECRET: z.string(),\n\tPAYPAL_URL: z.string().url(),\n\tTOKEN_AUDIENCE: z.string(),\n\tTOKEN_ISSUER: z.string(),\n\tNODE_ENV: z.string().optional().default('PROD'),\n\tPORT: z.string().default('4000'),\n\tEXPO_PUSHNOTIFICATIONS_PAT: z.string().optional(),\n});\n\nconst parsed = envSchema.safeParse(process.env);\n\nif (!parsed.success) {\n\tconsole.error('❌ Invalid environment variables:', parsed.error.flatten().fieldErrors);\n\tprocess.exit(1); // Stop the app if env is invalid\n}\n\nexport const env = {\n\t...parsed.data,\n};\n","import { PrismaClient } from '@prisma/client';\nimport { env } from 'utils/env';\n\nexport const prisma = new PrismaClient({\n\t//log: [],\n\tlog: env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n});\nexport type PrismaType = PrismaClient;\n","import 'utils/env';\n\nimport { prisma } from 'db';\nimport * as trpcExpress from '@trpc/server/adapters/express';\nimport { appRouter } from '../router/routers';\nimport express from 'express';\nimport cors from 'cors';\nimport { env } from '../utils/env';\nimport { createContext } from 'router';\n\nexport const createTRPCMiddleware = trpcExpress.createExpressMiddleware({\n\trouter: appRouter,\n\tcreateContext: createContext,\n\tonError:\n\t\tenv.NODE_ENV === 'development'\n\t\t\t? ({ path, error }: { path: unknown; error: unknown }) => {\n\t\t\t\t\tconsole.log(`❌ tRPC failed on ${path ?? '<no-path>'}: ${JSON.stringify(error)}`);\n\t\t\t  }\n\t\t\t: undefined,\n});\n\nconst app = express();\napp.use(cors());\napp.use('/trpc', createTRPCMiddleware);\n\napp.get('/health', async (req, res) => {\n\ttry {\n\t\tawait prisma.$queryRaw`SELECT 1`;\n\t\tres.status(200).json({ status: 'ok', db: 'connected' });\n\t} catch (error) {\n\t\tconsole.error('DB check failed:', error);\n\t\tres.status(500).json({ status: 'error', db: 'disconnected' });\n\t}\n});\n\napp.listen(parseInt(env.PORT), () => console.log(`Server is running on http://localhost:${env.PORT}/trpc`));\n","import { initTRPC, TRPCError } from '@trpc/server';\nimport superjson from 'superjson';\nimport { prisma } from 'db';\n\nimport { getHighestPermissionState } from 'utils/backend';\nimport { PermissionState } from 'db/databaseTypes';\nimport * as trpcExpress from '@trpc/server/adapters/express';\nimport { getServerAuthSession } from 'authentication/jwt';\nimport { AppSessionUser } from 'authentication';\n\nexport const createContext = async ({ req }: trpcExpress.CreateExpressContextOptions) => {\n\tconst authorizationHeader = req.headers.authorization;\n\tconst session = await getServerAuthSession(authorizationHeader);\n\treturn {\n\t\tsession: session ?? null,\n\t\tprisma,\n\t};\n};\n\nexport type Context = Awaited<ReturnType<typeof createContext>>;\nconst t = initTRPC.context<Context>().create({\n\ttransformer: superjson,\n\terrorFormatter({ shape }) {\n\t\treturn shape;\n\t},\n});\n\nexport const createTRPCRouter = t.router;\nexport const middleware = t.middleware;\nexport const publicProcedure = t.procedure;\n\nconst enforceUserIsAuthenticated = middleware<{ session: AppSessionUser }>(({ ctx, next }) => {\n\tif (!ctx.session) throw new TRPCError({ code: 'UNAUTHORIZED' });\n\n\treturn next({\n\t\tctx: {\n\t\t\t// infers the `session` as non-nullable\n\t\t\tsession: ctx.session!,\n\t\t},\n\t});\n});\nexport const protectedProcedure = t.procedure.use(enforceUserIsAuthenticated);\n\nconst roleCheck = (router: string, action: string) =>\n\tmiddleware<{ session: AppSessionUser; permission: PermissionState.ALL | PermissionState.OWN }>(async ({ ctx, next }) => {\n\t\tif (!ctx.session?.roles || ctx.session.roles.length === 0) throw new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\tconst permissions = await ctx.prisma.permission.findMany({\n\t\t\twhere: {\n\t\t\t\tOR: [\n\t\t\t\t\t{ router, action, userRoleId: { in: ctx.session?.roles } },\n\t\t\t\t\t{ router: '*', action: '*', userRoleId: { in: ctx.session?.roles } },\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconst permissionState = getHighestPermissionState(permissions);\n\t\tif (permissionState === PermissionState.NONE) throw new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\treturn next({\n\t\t\tctx: {\n\t\t\t\tpermission: permissionState,\n\t\t\t},\n\t\t});\n\t});\nexport const roleCheckProcedure = (router: string, action: string) => t.procedure.use(roleCheck(router, action));\n","import { DateTime, Interval, Settings } from 'luxon';\n\nSettings.defaultLocale = 'de';\nSettings.defaultZone = 'Europe/Berlin';\n\nexport const addDays = (date: Date, amount: number) => DateTime.fromJSDate(date).plus({ day: amount }).toJSDate();\nexport const subDays = (date: Date, amount: number) => DateTime.fromJSDate(date).minus({ day: amount }).toJSDate();\n\nexport const addHours = (date: Date, amount: number) => DateTime.fromJSDate(date).plus({ hour: amount }).toJSDate();\nexport const subHours = (date: Date, amount: number) => DateTime.fromJSDate(date).minus({ hour: amount }).toJSDate();\n\nexport const addMinutes = (date: Date, amount: number) => DateTime.fromJSDate(date).plus({ minute: amount }).toJSDate();\nexport const subMinutes = (date: Date, amount: number) => DateTime.fromJSDate(date).minus({ minute: amount }).toJSDate();\n\nexport const differenceInMinutes = (end: Date, start: Date) =>\n\tDateTime.fromJSDate(start).diff(DateTime.fromJSDate(end), ['minutes', 'seconds', 'milliseconds']).minutes;\n\nexport const format = (date: Date, format: string) => DateTime.fromJSDate(date).toFormat(format);\n\nexport const formatDate = (date: Date) => format(date, 'dd.MM.yyyy');\n\nexport const formatTime = (date: Date) => format(date, 'H:mm');\n\nexport const getHours = (date: Date) => format(date, 'Hmm');\n\nexport const isActivePeriod = (date: Date, data?: { activeFrom?: Date | null; activeTo?: Date | null } | null) => {\n\tif (!data || !data.activeFrom || !data.activeTo) return false;\n\n\tif (isBefore(date, data.activeFrom) || isAfter(date, data.activeTo)) return true;\n\n\treturn false;\n};\n\nexport const getIntervalFromJsDate = (firstDate: Date, secondDate: Date) => {\n\tconst fd = DateTime.fromJSDate(firstDate);\n\tconst sd = DateTime.fromJSDate(secondDate);\n\n\treturn Interval.fromDateTimes(fd, sd);\n};\n\nexport const isBefore = (firstDate: Date, secondDate: Date) => DateTime.fromJSDate(firstDate) < DateTime.fromJSDate(secondDate);\n\nexport const isAfter = (firstDate: Date, secondDate: Date) => DateTime.fromJSDate(firstDate) > DateTime.fromJSDate(secondDate);\n\nexport const compareAsc = (firstDate: Date, secondDate: Date) => {\n\tconst result = DateTime.fromJSDate(firstDate).toSeconds() - DateTime.fromJSDate(secondDate).toSeconds();\n\treturn result < 0 ? -1 : result > 0 ? 1 : 0;\n};\n\nexport const startOfDay = (date: Date) => DateTime.fromJSDate(date).startOf('day').toJSDate();\nexport const endOfDay = (date: Date) => DateTime.fromJSDate(date).endOf('day').toJSDate();\n\nconst zeroBasedWeekDayIntegers = [1, 2, 3, 4, 5, 6, 0];\nexport const getZeroBasedWeekdayInteger = (date: Date): number => zeroBasedWeekDayIntegers[DateTime.fromJSDate(date).get('weekday') - 1] ?? 1;\n","export const createHallencardCode = () => {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const charactersLength = characters.length;\n  let counter = 0;\n  while (counter < 15) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    if (counter === 4 || counter === 9) result += \"-\";\n    counter++;\n  }\n  return result;\n};\n\nexport const createHallencardPin = () => Math.floor(100000 + Math.random() * 900000);\n","import { addMinutes, differenceInMinutes, getHours, getZeroBasedWeekdayInteger, isBefore, subMinutes } from './date';\nimport { prisma } from 'db';\n\nexport const calculateReservationPrice = (start: Date, end: Date, prices: { from: number; to: number; value: number; taxes: number }[]) => {\n\tlet total = 0;\n\tlet taxRate = 0;\n\tlet currentTimeFrame = start;\n\tconst finalEnd = subMinutes(end, 2);\n\twhile (isBefore(currentTimeFrame, finalEnd)) {\n\t\tconst hours = parseInt(getHours(currentTimeFrame));\n\t\tlet bestPrice: number | undefined = undefined;\n\t\tconst fittingPrices = prices.filter((price) => price.from <= hours && price.to > hours);\n\t\tfor (const fittingPrice of fittingPrices) {\n\t\t\tif (bestPrice === undefined || bestPrice > fittingPrice.value) bestPrice = fittingPrice.value;\n\t\t\tif (taxRate === 0 || taxRate > fittingPrice.taxes) taxRate = fittingPrice.taxes;\n\t\t}\n\t\ttotal += (bestPrice ?? 0) / 4;\n\t\tcurrentTimeFrame = addMinutes(currentTimeFrame, 15);\n\t}\n\n\treturn { total, taxRate };\n};\n\nexport const getCourtPrice = async (start: Date, end: Date, userRoles: number[], courtId: string) => {\n\tconst startHours = parseInt(getHours(start));\n\tconst endHours = parseInt(getHours(end));\n\n\tconst prices = await prisma.price.findMany({\n\t\tselect: { from: true, to: true, value: true, currency: true, taxes: true },\n\t\twhere: {\n\t\t\troles: { some: { OR: userRoles.map((i) => ({ id: i })) ?? [] } },\n\t\t\t[getWeekday(start)]: true,\n\t\t\tvalidFrom: { lte: start },\n\t\t\tvalidTo: { gte: end },\n\t\t\tareas: { some: { courts: { some: { id: courtId } } } },\n\t\t\tOR: [\n\t\t\t\t//Start and End with price time bzw. in between a price section\n\t\t\t\t{ from: { lte: startHours }, to: { gte: endHours } },\n\t\t\t\t//Start and end in different price sections\n\t\t\t\t{ from: { lte: startHours }, to: { gte: startHours } },\n\t\t\t\t{ from: { lte: endHours }, to: { gte: endHours } },\n\t\t\t],\n\t\t},\n\t\torderBy: {\n\t\t\tvalue: 'asc',\n\t\t},\n\t});\n\n\tif (prices.length === 1) {\n\t\tconst hours = differenceInMinutes(start, end) / 60;\n\t\tif (prices[0]?.value) {\n\t\t\treturn { total: prices[0]?.value * hours, taxRate: prices[0]?.taxes };\n\t\t}\n\t} else if (prices.length > 0) {\n\t\treturn calculateReservationPrice(start, end, prices);\n\t}\n\treturn { total: 0, taxRate: 0 };\n};\n\nconst weekDays = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\nconst getWeekday = (date: Date): string => weekDays[getZeroBasedWeekdayInteger(date)] ?? 'mon';\n","import { Permission, PermissionState } from '@prisma/client';\n\nexport const getHighestPermissionState = (states: Array<Permission>) => {\n\tlet result: PermissionState = PermissionState.NONE;\n\tfor (const permission of states) {\n\t\tif (permission.allowed === PermissionState.ALL) return PermissionState.ALL;\n\t\tif (permission.allowed === PermissionState.OWN) result = PermissionState.OWN;\n\t\tif (permission.allowed === PermissionState.NONE) continue;\n\t}\n\treturn result;\n};\n","export const getNetFromGross = (grossPrice: number, taxRate = 19) => {\n\tconst vat = taxRate / 100;\n\n\t//Net = Gross / (1 + Vat)\n\treturn +(grossPrice / (1 + vat)).toFixed(2);\n};\n\nexport const getTaxValueFromGross = (gross: number, taxRate = 19) => {\n\tconst vat = taxRate / 100;\n\n\t//Tax = Gross * Vat / (1 + Vat)\n\treturn +((gross * vat) / (1 + vat)).toFixed(2);\n};\n","export enum ApplicationDialogPermission {\n\tREPEATED_RESERVATIONS = 'repeatedReservations',\n\tMULTIPLE_COURT_RESERVATIONS = 'multipleCourtReservations',\n\tRESERVATION_SETTINGS = 'reservationSettings',\n\tDELETE_BOOKING = 'deleteBooking',\n}\n","// This file was auto-generated by prisma-generator-typescript-interfaces\n\nexport enum ReservationType {\n  TOURNAMENT = \"TOURNAMENT\",\n  MAINTENANCE = \"MAINTENANCE\",\n  TEAM_PRACTICE = \"TEAM_PRACTICE\",\n  TEAM_COMPETITION = \"TEAM_COMPETITION\"\n}\n\nexport enum ReservationStatus {\n  REQUESTED = \"REQUESTED\",\n  BILLED = \"BILLED\",\n  APPROVED = \"APPROVED\"\n}\n\nexport enum ReservationRuleCheckOn {\n  CREATE = \"CREATE\",\n  UPDATE = \"UPDATE\",\n  DELETE = \"DELETE\"\n}\n\nexport enum AbonnementStatus {\n  REQUESTED = \"REQUESTED\",\n  APPROVED = \"APPROVED\",\n  BILLED = \"BILLED\",\n  PAID = \"PAID\",\n  DELETED = \"DELETED\"\n}\n\nexport enum PermissionState {\n  NONE = \"NONE\",\n  OWN = \"OWN\",\n  ALL = \"ALL\"\n}\n\nexport enum TransactionReason {\n  HALLENCARD_RECHARGE = \"HALLENCARD_RECHARGE\",\n  INVOICE = \"INVOICE\",\n  ONLINE_PAYMENT = \"ONLINE_PAYMENT\",\n  BANK_TRANSFER = \"BANK_TRANSFER\",\n  COURT_RESERVATION = \"COURT_RESERVATION\",\n  COURT_RESERVATION_STORNO = \"COURT_RESERVATION_STORNO\",\n  REFUND = \"REFUND\",\n  DONATION = \"DONATION\"\n}\n\nexport enum TeamCategory {\n  Men = \"Men\",\n  Women = \"Women\",\n  Youth = \"Youth\"\n}\n\nexport enum NotificationSeverity {\n  ERROR = \"ERROR\",\n  WARNING = \"WARNING\",\n  INFO = \"INFO\",\n  SUCCESS = \"SUCCESS\"\n}\n\nexport interface User {\n  id: string;\n  name: string | null;\n  email: string | null;\n  image: string | null;\n  auth0Id: string;\n  address: string | null;\n  cityCode: string | null;\n  cityName: string | null;\n  countryCode: string | null;\n  needsSetup: boolean;\n  publicName: boolean;\n  phoneNumber: string | null;\n  abonnements?: Abonnement[];\n  ownedReservations?: Reservation[];\n  fellowedReservations?: Reservation[];\n  transactions?: Transaction[];\n  teams?: TeamMember[];\n  leadTeams?: TeamSeason[];\n  expoPushTokens?: ExpoPushTokens[];\n  roles?: UserRole[];\n  likedEvents?: Event[];\n}\n\nexport interface VerificationToken {\n  identifier: string;\n  token: string;\n  expires: Date;\n}\n\nexport interface Area {\n  id: number;\n  name: string;\n  shortName: string;\n  activeFrom: Date | null;\n  activeTo: Date | null;\n  bookableFrom: Date | null;\n  order: number | null;\n  courts?: Court[];\n  reservationRules?: ReservationRule[];\n  prices?: Price[];\n}\n\nexport interface Court {\n  id: string;\n  name: string;\n  shortName: string | null;\n  description: string | null;\n  order: number | null;\n  active: boolean;\n  activeFrom: Date | null;\n  activeTo: Date | null;\n  area?: Area;\n  areaId: number;\n  abonnements?: Abonnement[];\n  reservations?: Reservation[];\n  reservationRules?: ReservationRule[];\n  controlInterfaces?: ControlInterface[];\n}\n\nexport interface Reservation {\n  id: string;\n  title: string;\n  start: Date;\n  end: Date;\n  court?: Court | null;\n  courtId: string | null;\n  status: ReservationStatus;\n  type: ReservationType | null;\n  paypalTransactionId: string | null;\n  price: number | null;\n  taxRate: number | null;\n  light: boolean;\n  radiator: boolean;\n  abo?: Abonnement | null;\n  abonnementId: string | null;\n  owner?: User | null;\n  ownerId: string | null;\n  fellows?: User[];\n  transactions?: Transaction[];\n  createdAt: Date;\n  deletedAt: Date | null;\n}\n\nexport interface ReservationRule {\n  id: string;\n  name: string;\n  errorDescription: string | null;\n  validFor?: UserRole[];\n  affectedAreas?: Area[];\n  affectedCourts?: Court[];\n  checkOn: ReservationRuleCheckOn;\n  ruleCheckPluginName: string | null;\n  value: string;\n}\n\nexport interface Abonnement {\n  id: string;\n  name: string;\n  weekday: number;\n  start: Date;\n  duration: number;\n  status: AbonnementStatus;\n  court?: Court | null;\n  courtId: string | null;\n  owner?: User | null;\n  ownerId: string | null;\n  transactions?: Transaction[];\n  reservations?: Reservation[];\n}\n\nexport interface UserRole {\n  id: number;\n  title: string;\n  description: string | null;\n  isDefault: boolean;\n  permissions?: Permission[];\n  users?: User[];\n  prices?: Price[];\n  reservationRules?: ReservationRule[];\n  pushNotificationChannels?: PushNotificationChannel[];\n  priority: number;\n}\n\nexport interface Permission {\n  router: string;\n  action: string;\n  userRole?: UserRole;\n  userRoleId: number;\n  allowed: PermissionState;\n}\n\nexport interface Hallencard {\n  code: string;\n  pin: string;\n  value: number;\n  printed: boolean;\n  transaction?: Transaction | null;\n  transactionId: string | null;\n}\n\nexport interface Price {\n  id: string;\n  validFrom: Date | null;\n  validTo: Date | null;\n  isDefault: boolean;\n  mon: boolean;\n  tue: boolean;\n  wed: boolean;\n  thu: boolean;\n  fri: boolean;\n  sat: boolean;\n  sun: boolean;\n  from: number;\n  to: number;\n  value: number;\n  currency: string;\n  taxes: number;\n  roles?: UserRole[];\n  areas?: Area[];\n}\n\nexport interface Transaction {\n  id: string;\n  user?: User | null;\n  userId: string | null;\n  value: number;\n  currency: string;\n  reason: TransactionReason;\n  paymentInformation: string | null;\n  hallencard?: Hallencard | null;\n  reservation?: Reservation | null;\n  reservationId: string | null;\n  abonnement?: Abonnement | null;\n  abonnementId: string | null;\n  createdAt: Date;\n  deleted: boolean;\n}\n\nexport interface Season {\n  id: number;\n  name: string;\n  shortName: string;\n  starting: Date;\n  ending: Date;\n  current: boolean;\n  teams?: TeamSeason[];\n  players?: TeamMember[];\n}\n\nexport interface Team {\n  id: number;\n  name: string;\n  shortName: string;\n  category: TeamCategory;\n  orderNumber: number;\n  teamSeasons?: TeamSeason[];\n  members?: TeamMember[];\n}\n\nexport interface TeamSeason {\n  team?: Team;\n  teamId: number;\n  season?: Season;\n  seasonId: number;\n  teamLeader?: User | null;\n  teamLeaderId: string | null;\n  nuGroupId: string;\n  nuTeamId: string;\n  leagueName: string;\n}\n\nexport interface TeamMember {\n  user?: User;\n  userId: string;\n  team?: Team;\n  teamId: number;\n  season?: Season;\n  seasonId: number;\n}\n\nexport interface Notification {\n  id: string;\n  title: string;\n  message: string | null;\n  severity: NotificationSeverity;\n  showFrom: Date;\n  showTo: Date;\n}\n\nexport interface Benefit {\n  id: string;\n  title: string;\n  description: string | null;\n  image: string | null;\n  cover: boolean;\n  link: string | null;\n  activeFrom: Date | null;\n  activeTo: Date | null;\n}\n\nexport interface ControlInterface {\n  id: string;\n  title: string;\n  description: string;\n  preBooking: number;\n  postBooking: number;\n  connectByAnd: boolean;\n  connectByOr: boolean;\n  affectedCourts?: Court[];\n}\n\nexport interface Organisation {\n  id: string;\n  slug: string;\n  title: string;\n  members?: OrganisationMember[];\n}\n\nexport interface OrganisationMember {\n  id: string;\n  fullName: string;\n  function: string | null;\n  image: string | null;\n  email: string | null;\n  phone: string | null;\n  orderID: number | null;\n  organisation?: Organisation;\n  organisationId: string;\n  parentMember?: OrganisationMember | null;\n  parentMemberId: string | null;\n  childMembers?: OrganisationMember[];\n}\n\nexport interface EventCategory {\n  id: string;\n  slug: string;\n  title: string;\n  events?: Event[];\n}\n\nexport interface Event {\n  id: string;\n  title: string;\n  description: string | null;\n  image: string | null;\n  start: Date;\n  end: Date | null;\n  canceled: boolean;\n  revised: boolean;\n  link: string | null;\n  location: string | null;\n  category?: EventCategory;\n  categoryId: string;\n  likedByUsers?: User[];\n}\n\nexport interface PushNotificationChannel {\n  id: string;\n  title: string;\n  isPublic: boolean;\n  grantedUserRoles?: UserRole[];\n  notifications?: PushNotification[];\n  subscribers?: ExpoPushTokens[];\n}\n\nexport interface ExpoPushTokens {\n  id: string;\n  channels?: PushNotificationChannel[];\n  user?: User | null;\n  userId: string | null;\n}\n\nexport interface PushNotification {\n  id: string;\n  title: string;\n  message: string;\n  channel?: PushNotificationChannel;\n  channelId: string;\n}\n","import jwt from 'jsonwebtoken';\nimport { AppSessionUser, generateAppSessionUser, tokenAudience, tokenIssuer } from '.';\nimport { getPublicSigningKey } from './jwks';\nimport { prisma } from 'db';\n\nconst jsonWebTokenOptions: jwt.VerifyOptions = {\n\taudience: tokenAudience,\n\tissuer: tokenIssuer,\n\talgorithms: ['RS256'],\n};\n\nconst verifyTokenAsync = async (\n\ttoken: string,\n\tgetPublicSigningKey: jwt.Secret | jwt.PublicKey | jwt.GetPublicKeyOrSecret,\n\toptions: jwt.VerifyOptions\n): Promise<string | jwt.Jwt | jwt.JwtPayload | jwt.VerifyErrors | undefined> =>\n\tnew Promise((resolve, reject) => {\n\t\tjwt.verify(token, getPublicSigningKey, options, (err, decoded) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(decoded);\n\t\t\t}\n\t\t});\n\t});\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isJwtToken = (data: any): data is jwt.Jwt => data.header && data.payload && data.signature;\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isJwtPayload = (data: any): data is jwt.JwtPayload => data.iss && data.sub && data.aud;\n\nexport const getServerAuthSession = async (authorizationHeader: string | undefined) => {\n\ttry {\n\t\tif (!authorizationHeader || authorizationHeader.length === 0) return;\n\n\t\tconst token = authorizationHeader.split(' ')[1];\n\t\tif (!token) return;\n\n\t\tconst decoded = await verifyTokenAsync(token, getPublicSigningKey, jsonWebTokenOptions);\n\n\t\tif (typeof decoded === 'string') return;\n\t\tif (isJwtToken(decoded) && isJwtPayload(decoded.payload)) return getAppSessionUser(decoded.payload);\n\t\telse if (isJwtPayload(decoded)) return getAppSessionUser(decoded);\n\n\t\treturn;\n\t} catch (ex) {\n\t\tconsole.error(ex);\n\t}\n\n\treturn;\n};\n\nexport const getAppSessionUser = async (payload: jwt.JwtPayload): Promise<AppSessionUser> => {\n\tconst email: string = payload['https://tc-schoenbusch.de/mail'];\n\n\tconst [auth0User, emailUser] = await Promise.all([\n\t\tprisma.user.findUnique({\n\t\t\twhere: { auth0Id: payload.sub },\n\t\t\tinclude: { roles: true },\n\t\t}),\n\t\tprisma.user.findUnique({\n\t\t\twhere: { email },\n\t\t\tinclude: { roles: true },\n\t\t}),\n\t]);\n\n\tif (auth0User && emailUser) {\n\t\treturn generateAppSessionUser(auth0User);\n\t} else if (auth0User && !emailUser) {\n\t\tawait prisma.user.update({ data: { email }, where: { id: auth0User.id } });\n\t\treturn generateAppSessionUser(auth0User);\n\t} else if (!auth0User && emailUser) {\n\t\tawait prisma.user.update({ data: { auth0Id: payload.sub }, where: { id: emailUser.id } });\n\t\treturn generateAppSessionUser(emailUser);\n\t}\n\n\tconst role = await prisma.userRole.findFirst({ where: { isDefault: true }, select: { id: true } });\n\tconst user = await prisma.user.create({\n\t\tdata: {\n\t\t\temail: email,\n\t\t\tauth0Id: payload.sub!,\n\t\t\troles: role ? { connect: { id: role?.id } } : undefined,\n\t\t},\n\t\tinclude: { roles: true },\n\t});\n\treturn generateAppSessionUser(user);\n};\n\nexport const generateMembershipToken = (payload: object) => jwt.sign(payload, 'AbTcSMemBership#Card#2025!', { expiresIn: '30d' });\n","import { UserRole } from 'db/databaseTypes';\nimport { env } from 'utils/env';\n\nexport const tokenAudience: string = env.TOKEN_AUDIENCE;\nexport const tokenIssuer: string = env.TOKEN_ISSUER;\n\nexport type AppSessionUser = {\n\tid: string;\n\tname: string | null;\n\temail: string | null;\n\troles: Array<number> | null;\n};\n\n//eslint-disable-next-line\nexport const generateAppSessionUser = (user: any): AppSessionUser => {\n\tconst { id, name, email, roles } = user;\n\n\treturn {\n\t\tid,\n\t\tname,\n\t\temail,\n\t\troles: (roles as Array<UserRole>).sort((prev, next) => prev.priority - next.priority).map((i: { id: number }) => i.id),\n\t};\n};\n","import jwksClient from 'jwks-rsa';\n\n//TODO: change this\nconst jwksUri = 'https://login.tc-schoenbusch.de/.well-known/jwks.json';\nconst jsonWebKeyClient = jwksClient({\n\tcache: true,\n\trateLimit: true,\n\tjwksUri,\n\ttimeout: 1000,\n});\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getPublicSigningKey = (header: any, callback: any) => {\n\tjsonWebKeyClient\n\t\t.getSigningKey(header.kid)\n\t\t.then((data) => {\n\t\t\tcallback(null, data.getPublicKey());\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcallback(e, null);\n\t\t});\n};\n","import { PermissionState } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst dataCheck = {\n\tname: z.string(),\n\tshortName: z.string(),\n\tactiveFrom: z.date().nullable().optional(),\n\tactiveTo: z.date().nullable().optional(),\n\tbookableFrom: z.date().nullable().optional(),\n\torder: z.number().nullable().optional(),\n};\n\nconst selectList = {\n\tid: true,\n\tname: true,\n\tshortName: true,\n\t_count: true,\n};\n\nconst activeWhere = (date: Date = new Date()) => ({\n\tOR: [\n\t\t{ activeFrom: { lt: date }, activeTo: { gt: date } },\n\t\t{ activeFrom: null, activeTo: null },\n\t],\n});\nconst routerName = 'area';\nexport const areaRouter = createTRPCRouter({\n\tlist: roleCheckProcedure(routerName, 'list').query(({ ctx }) =>\n\t\tctx.prisma.area.findMany({\n\t\t\tselect: selectList,\n\t\t\torderBy: [{ order: 'asc' }, { name: 'asc' }],\n\t\t})\n\t),\n\tlistActive: roleCheckProcedure(routerName, 'listActive').query(({ ctx }) =>\n\t\tctx.prisma.area.findMany({\n\t\t\tselect: selectList,\n\t\t\twhere: ctx.permission === PermissionState.ALL ? undefined : activeWhere(),\n\t\t\torderBy: [{ order: 'asc' }, { name: 'asc' }],\n\t\t})\n\t),\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.number())\n\t\t.query(({ ctx, input }) =>\n\t\t\tctx.prisma.area.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\tshortName: true,\n\t\t\t\t\tactiveFrom: true,\n\t\t\t\t\tactiveTo: true,\n\t\t\t\t\tbookableFrom: true,\n\t\t\t\t\torder: true,\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\tgetWithAllCourts: roleCheckProcedure(routerName, 'getWithAllCourts')\n\t\t.input(z.number())\n\t\t.query(({ ctx, input }) =>\n\t\t\tctx.prisma.area.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\tshortName: true,\n\t\t\t\t\tactiveFrom: true,\n\t\t\t\t\tactiveTo: true,\n\t\t\t\t\torder: true,\n\t\t\t\t\tcourts: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\tshortName: true,\n\t\t\t\t\t\t\tdescription: true,\n\t\t\t\t\t\t\torder: true,\n\t\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\t\tactiveFrom: true,\n\t\t\t\t\t\t\tactiveTo: true,\n\t\t\t\t\t\t\t_count: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\torderBy: [{ order: 'asc' }, { name: 'asc' }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\tgetWithActiveCourts: roleCheckProcedure(routerName, 'getWithActiveCourts')\n\t\t.input(z.object({ areaId: z.number().optional(), date: z.date() }))\n\t\t.query(({ ctx, input }) =>\n\t\t\tctx.prisma.area.findFirst({\n\t\t\t\twhere: { id: input.areaId },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\tcourts: {\n\t\t\t\t\t\tselect: { id: true, name: true, description: true },\n\t\t\t\t\t\twhere: { AND: [{ active: true }, activeWhere(input.date)] },\n\t\t\t\t\t\torderBy: [{ order: 'asc' }, { name: 'asc' }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(z.object({ id: z.number().optional(), ...dataCheck }))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\tif (id) {\n\t\t\t\treturn ctx.prisma.area.update({\n\t\t\t\t\twhere: { id },\n\t\t\t\t\tdata,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn ctx.prisma.area.create({ data });\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.number())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.area.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { TRPCError } from '@trpc/server';\nimport { z } from 'zod';\n\nimport { benefitSchema } from 'schemes/benefit';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'benefit';\nexport const benefitRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(z.object(benefitSchema))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\treturn ctx.prisma.benefit.create({\n\t\t\t\tdata: input,\n\t\t\t});\n\t\t}),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(async ({ ctx, input }) =>\n\t\t\tctx.prisma.benefit.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n\n\tlist: roleCheckProcedure(routerName, 'list').query(async ({ ctx }) =>\n\t\tctx.prisma.benefit.findMany({\n\t\t\torderBy: [{ title: 'asc' }],\n\t\t})\n\t),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(z.object({ id: z.string().optional(), ...benefitSchema }))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\tif (!id) throw new TRPCError({ code: 'BAD_REQUEST' });\n\n\t\t\treturn ctx.prisma.benefit.update({\n\t\t\t\twhere: { id },\n\t\t\t\tdata,\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.benefit.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { z } from 'zod';\n\nexport const benefitSchema = {\n  title: z.string(),\n  description: z.string().nullable(),\n  image: z.string().optional().nullable(),\n  cover: z.boolean().optional(),\n  link: z.string().url().optional().nullable(),\n\n  activeFrom: z.date().optional().nullable(),\n  activeTo: z.date().optional().nullable(),\n};\n\nexport const benefitSchemaObject = z.object(benefitSchema);\n","import { z } from 'zod';\n\nimport { controlInterfaceSchema, controlInterfaceSchemaObject } from 'schemes/controlInterface';\nimport { addMinutes, subMinutes } from 'utils/backend';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nimport { isCourtAvailable } from './reservation';\n\nconst routerName = 'controlInterface';\nexport const controlInterfaceRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(controlInterfaceSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { affectedCourts, ...data } = input;\n\t\t\tconst modifiedAffectedCourts = affectedCourts?.map((id: string) => ({ id }));\n\t\t\treturn ctx.prisma.controlInterface.create({\n\t\t\t\tdata: { ...data, affectedCourts: { connect: modifiedAffectedCourts } },\n\t\t\t});\n\t\t}),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(async ({ ctx, input: id }) =>\n\t\t\tctx.prisma.controlInterface.findUnique({ where: { id }, include: { affectedCourts: { select: { id: true } } } })\n\t\t),\n\n\tlist: roleCheckProcedure(routerName, 'list').query(async ({ ctx }) => ctx.prisma.controlInterface.findMany({ orderBy: [{ title: 'asc' }] })),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(z.object({ id: z.string(), ...controlInterfaceSchema }))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, affectedCourts, ...data } = input;\n\n\t\t\tconst modifiedAffectedCourts = affectedCourts?.map((id: string) => ({ id }));\n\n\t\t\treturn ctx.prisma.controlInterface.update({\n\t\t\t\twhere: { id },\n\t\t\t\tdata: {\n\t\t\t\t\t...data,\n\t\t\t\t\taffectedCourts: { connect: modifiedAffectedCourts },\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) => ctx.prisma.controlInterface.delete({ where: { id: input } })),\n\n\texecute: publicProcedure.input(z.string()).query(async ({ ctx, input: id }) => {\n\t\tconst controlInterface = await ctx.prisma.controlInterface.findUnique({\n\t\t\twhere: { id },\n\t\t\tinclude: { affectedCourts: { select: { id: true } } },\n\t\t});\n\n\t\tif (controlInterface) {\n\t\t\tconst now = new Date();\n\t\t\tconst result: Array<boolean> = [];\n\n\t\t\tfor (const court of controlInterface.affectedCourts) {\n\t\t\t\tconst [isAvailablePre, isAvailablePost] = await Promise.all([\n\t\t\t\t\tisCourtAvailable(now, addMinutes(now, controlInterface.preBooking + 1), court.id),\n\t\t\t\t\tisCourtAvailable(subMinutes(now, controlInterface.postBooking + 1), now, court.id),\n\t\t\t\t]);\n\n\t\t\t\t//if the court is not available, the switches need to be on\n\t\t\t\tresult.push(!(isAvailablePre && isAvailablePost));\n\t\t\t}\n\n\t\t\tif (controlInterface.connectByAnd) return result.every((v) => v);\n\t\t\tif (controlInterface.connectByOr) return result.some((v) => v);\n\t\t\treturn result;\n\t\t}\n\t\treturn null;\n\t}),\n});\n","import { z } from 'zod';\n\nexport const controlInterfaceSchema = {\n  //id           :z.string(),\n  title: z.string(),\n  description: z.string(),\n  preBooking: z.number(),\n  postBooking: z.number(),\n  connectByAnd: z.boolean().optional(),\n  connectByOr: z.boolean().optional(),\n\n  affectedCourts: z.string().array().optional(),\n};\n\nexport const controlInterfaceSchemaObject = z.object(controlInterfaceSchema);\n","import { AbonnementStatus, PermissionState, ReservationRuleCheckOn, ReservationStatus } from 'db/databaseTypes';\nimport { TransactionReason } from 'db/databaseTypes';\nimport { TRPCError } from '@trpc/server';\nimport { DateTime } from 'luxon';\nimport { z } from 'zod';\nimport { createReservationSchema, getPriceSchema } from 'schemes/reservation';\nimport {\n\taddDays,\n\tendOfDay,\n\tformatDate,\n\tgetZeroBasedWeekdayInteger,\n\tisAfter,\n\tisBefore,\n\tstartOfDay,\n\taddMinutes,\n\tformat,\n\tsubMinutes,\n\tgetCourtPrice,\n} from 'utils/backend';\n\nimport { ruleCheckPlugins } from 'utils/ruleCheckPlugins';\nimport { prisma } from 'db';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nimport { transactionRouter } from './transaction';\nimport { ReservationRawData } from 'utils/ruleCheckPlugins/type';\nimport { capturePayment, createOrder, createPurchaseItem } from 'plugins/paypal-v9';\n\nconst normalizeTime = (date: Date) => DateTime.fromJSDate(date).set({ second: 0, millisecond: 0 }).toJSDate();\nconst isAvailable = async (start: Date, end: Date, courtId: string) =>\n\t(\n\t\tawait prisma.reservation.findMany({\n\t\t\twhere: {\n\t\t\t\tOR: getBookingWhereClause(start, end),\n\t\t\t\tcourtId,\n\t\t\t\tdeletedAt: null,\n\t\t\t},\n\t\t})\n\t).length === 0;\n\nexport const isCourtAvailable = isAvailable;\n\nconst getMaxDate = (maximumRepeatableTo?: Date | null, repeatUntil?: Date) => {\n\tif (maximumRepeatableTo && repeatUntil) {\n\t\treturn isBefore(maximumRepeatableTo, repeatUntil) ? maximumRepeatableTo : repeatUntil;\n\t}\n\treturn repeatUntil ?? maximumRepeatableTo;\n};\n\nconst routerName = 'reservation';\nexport const reservationRouter = createTRPCRouter({\n\tgetPrice: roleCheckProcedure(routerName, 'getPrice')\n\t\t.input(z.object(getPriceSchema))\n\t\t.query(async ({ input, ctx }) => getCourtPrice(normalizeTime(input.start), input.end, ctx.session?.roles ?? [], input.courtId)),\n\n\tgetNextReservationStart: roleCheckProcedure(routerName, 'getNextReservationStart')\n\t\t.input(z.object({ courtId: z.string(), startTime: z.date() }))\n\t\t.query(async ({ input, ctx }) =>\n\t\t\tctx.prisma.reservation.findFirst({\n\t\t\t\twhere: { courtId: input.courtId, start: { gte: normalizeTime(input.startTime) }, deletedAt: null },\n\t\t\t\torderBy: { start: 'asc' },\n\t\t\t\tselect: { start: true },\n\t\t\t})\n\t\t),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(async ({ input, ctx }) => {\n\t\t\tconst reservation = await ctx.prisma.reservation.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tinclude: {\n\t\t\t\t\tcourt: { select: { name: true, area: { select: { name: true } } } },\n\t\t\t\t\tfellows: { select: { name: true } },\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (ctx.permission !== PermissionState.ALL && ctx.permission === PermissionState.OWN && reservation?.ownerId !== ctx.session.id)\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED', message: 'Du darfst diese Buchung nicht anschauen.' });\n\n\t\t\treturn reservation;\n\t\t}),\n\n\tgetReservationsByRessource: roleCheckProcedure(routerName, 'getReservationsByRessource')\n\t\t.input(z.object({ courtId: z.string(), date: z.date() }))\n\t\t.query(async ({ input, ctx }) => {\n\t\t\tconst reservations = await ctx.prisma.reservation.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tcourtId: input.courtId,\n\t\t\t\t\tstart: { gte: startOfDay(input.date), lte: endOfDay(input.date) },\n\t\t\t\t\tdeletedAt: null,\n\t\t\t\t},\n\t\t\t\torderBy: { start: 'asc' },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t\tstart: true,\n\t\t\t\t\tend: true,\n\t\t\t\t\tstatus: true,\n\t\t\t\t\ttype: true,\n\t\t\t\t\tabonnementId: true,\n\t\t\t\t\towner: { select: { id: true, publicName: true } },\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn reservations.map((i) => ({\n\t\t\t\t...i,\n\t\t\t\towner: undefined,\n\t\t\t\ttitle:\n\t\t\t\t\ti.owner?.publicName || i.owner?.id === ctx.session.id || ctx.permission === PermissionState.ALL || i.type !== null ? i.title : 'gebucht',\n\t\t\t}));\n\t\t}),\n\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(z.object(createReservationSchema))\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst data = input;\n\t\t\tconst start = normalizeTime(data.start);\n\t\t\tconst duration = parseFloat(data.duration);\n\t\t\tconst end = addMinutes(start, duration * 60);\n\n\t\t\tif (!(await isAvailable(start, end, data.courtId)))\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'CONFLICT',\n\t\t\t\t\tmessage: 'Während deiner Buchung findet bereits eine andere Reservierung statt.',\n\t\t\t\t});\n\n\t\t\tconst ownerId = ctx.permission === PermissionState.ALL && data.ownerId ? data.ownerId : ctx.session!.id;\n\t\t\tconst fellows = data.fellows?.map((i) => ({ id: i.id })) ?? [];\n\n\t\t\tconst [courtSpecifications, price, bookingOwner] = await Promise.all([\n\t\t\t\tprisma.court.findUnique({\n\t\t\t\t\twhere: { id: data.courtId },\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tactiveFrom: true,\n\t\t\t\t\t\tactiveTo: true,\n\t\t\t\t\t\tarea: { select: { id: true, activeFrom: true, activeTo: true, bookableFrom: true } },\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tgetCourtPrice(start, end, ctx.session?.roles ?? [], data.courtId),\n\t\t\t\tctx.prisma.user.findUnique({ where: { id: ownerId }, select: { name: true } }),\n\t\t\t]);\n\n\t\t\tconst reservationData: ReservationRawData = {\n\t\t\t\ttitle: data.title && data.title.trim().length > 0 ? data.title : bookingOwner?.name ?? '',\n\t\t\t\tstart,\n\t\t\t\tend: addMinutes(start, parseFloat(data.duration) * 60),\n\t\t\t\tcourtId: data.courtId,\n\t\t\t\tstatus: price.total === 0 ? ReservationStatus.APPROVED : ReservationStatus.REQUESTED,\n\t\t\t\ttype: data.type,\n\t\t\t\townerId,\n\t\t\t\tlight: true,\n\t\t\t\tradiator: true,\n\t\t\t\tfellows: fellows.length > 0 ? { connect: fellows } : undefined,\n\t\t\t\tprice: price.total,\n\t\t\t\ttaxRate: price.taxRate,\n\t\t\t};\n\n\t\t\tif (courtSpecifications) {\n\t\t\t\tcheckReservation(reservationData, courtSpecifications);\n\t\t\t\tawait checkReservationRules(ReservationRuleCheckOn.CREATE, reservationData, courtSpecifications, ctx.session?.roles);\n\t\t\t}\n\n\t\t\tif (data.courts && data.courts.length > 0) {\n\t\t\t\tif (price.total !== 0)\n\t\t\t\t\tthrow new TRPCError({\n\t\t\t\t\t\tcode: 'METHOD_NOT_SUPPORTED',\n\t\t\t\t\t\tmessage: 'Mehrere Plätze können nur gebucht werden, wenn keine Gebühr fällig ist.',\n\t\t\t\t\t});\n\n\t\t\t\treturn ctx.prisma.reservation.createMany({\n\t\t\t\t\tdata: await getMultiCourtReservations(reservationData, data.courts, start, end),\n\t\t\t\t});\n\t\t\t} else if (data.repeatInterval && data.repeatInterval > 0) {\n\t\t\t\tif (price.total !== 0)\n\t\t\t\t\tthrow new TRPCError({\n\t\t\t\t\t\tcode: 'METHOD_NOT_SUPPORTED',\n\t\t\t\t\t\tmessage: 'Abonnements können nur gebucht werden, wenn keine Gebühr fällig ist.',\n\t\t\t\t\t});\n\n\t\t\t\tconst courtData = await ctx.prisma.court.findUnique({\n\t\t\t\t\twhere: { id: data.courtId },\n\t\t\t\t\tselect: { activeTo: true, area: { select: { activeTo: true } } },\n\t\t\t\t});\n\t\t\t\tconst maximumRepeatableTo = courtData?.activeTo ?? courtData?.area.activeTo;\n\t\t\t\tconst maxDate = getMaxDate(maximumRepeatableTo, data.repeatUntil);\n\n\t\t\t\tif (!maxDate)\n\t\t\t\t\tthrow new TRPCError({\n\t\t\t\t\t\tcode: 'METHOD_NOT_SUPPORTED',\n\t\t\t\t\t\tmessage: 'Es wurde kein maximales Buchungsdatum gefunden.',\n\t\t\t\t\t});\n\n\t\t\t\tconst abo = await ctx.prisma.abonnement.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname: data.title ?? 'Abonnement',\n\t\t\t\t\t\tweekday: getZeroBasedWeekdayInteger(start),\n\t\t\t\t\t\tstart: start,\n\t\t\t\t\t\tduration,\n\t\t\t\t\t\tstatus: data.repeatApproved ? AbonnementStatus.APPROVED : AbonnementStatus.REQUESTED,\n\t\t\t\t\t\tcourtId: data.courtId,\n\t\t\t\t\t\townerId,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tconst repeatReservationData = {\n\t\t\t\t\t...reservationData,\n\t\t\t\t\tstatus: data.repeatApproved ? ReservationStatus.APPROVED : ReservationStatus.REQUESTED,\n\t\t\t\t\ttransactions: undefined,\n\t\t\t\t\tabonnementId: abo.id,\n\t\t\t\t};\n\n\t\t\t\tconst reservations = [];\n\t\t\t\tfor (let currentDate = start; isBefore(currentDate, maxDate); currentDate = addDays(currentDate, data.repeatInterval)) {\n\t\t\t\t\tconst endDate = addMinutes(currentDate, parseFloat(data.duration) * 60);\n\n\t\t\t\t\tif (!reservationData.courtId || !(await isAvailable(currentDate, endDate, reservationData.courtId))) continue;\n\t\t\t\t\treservations.push({\n\t\t\t\t\t\t...repeatReservationData,\n\t\t\t\t\t\tstart: currentDate,\n\t\t\t\t\t\tend: endDate,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn ctx.prisma.reservation.createMany({\n\t\t\t\t\tdata: reservations,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn await ctx.prisma.reservation.create({ data: reservationData });\n\t\t\t}\n\t\t}),\n\n\tpayForReservation: roleCheckProcedure(routerName, 'payForReservation')\n\t\t.input(z.object({ reservationId: z.string(), useHallencard: z.boolean(), returnUrl: z.string().optional(), cancelUrl: z.string().optional() }))\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst reservation = await ctx.prisma.reservation.findUnique({\n\t\t\t\twhere: { id: input.reservationId },\n\t\t\t\tinclude: { court: { select: { name: true } } },\n\t\t\t});\n\n\t\t\tif (!reservation || !reservation.courtId)\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'METHOD_NOT_SUPPORTED',\n\t\t\t\t\tmessage: 'Die Reservierung ist bereits abgelaufen. Bitte versuchen Sie es erneut.',\n\t\t\t\t});\n\n\t\t\tif (!reservation.price || !reservation.taxRate) {\n\t\t\t\tvoid ctx.prisma.reservation.delete({ where: { id: reservation.id } });\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'METHOD_NOT_SUPPORTED',\n\t\t\t\t\tmessage: 'Die Transaktion konnte nicht durchgeführt werden. Bitte versuchen Sie es erneut.',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet discount = 0;\n\t\t\tif (input.useHallencard && ctx.session) {\n\t\t\t\tconst transactions = transactionRouter.createCaller(ctx);\n\t\t\t\tconst balance = await transactions.balance(ctx.session.id);\n\n\t\t\t\tif (balance.length === 1) discount = balance[0]?._sum.value ?? 0;\n\n\t\t\t\tif (discount >= reservation.price) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\treservation: await ctx.prisma.reservation.update({\n\t\t\t\t\t\t\twhere: { id: reservation.id },\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tstatus: ReservationStatus.APPROVED,\n\t\t\t\t\t\t\t\ttransactions: {\n\t\t\t\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\t\t\t\tuserId: reservation.ownerId ?? ctx.session.id,\n\t\t\t\t\t\t\t\t\t\tvalue: reservation.price * -1,\n\t\t\t\t\t\t\t\t\t\tcurrency: 'EUR',\n\t\t\t\t\t\t\t\t\t\treason: TransactionReason.COURT_RESERVATION,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tpaypalTransaction: undefined,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Start paypal transaction process\n\t\t\tconst currencyCode = 'EUR';\n\t\t\tconst purchaseItems = [];\n\t\t\tpurchaseItems.push(\n\t\t\t\tcreatePurchaseItem(\n\t\t\t\t\t`${reservation.court?.name ?? ''} am ${format(reservation.start, 'dd.MM.yyyy')} um ${format(reservation.start, 'HH:mm')} - ${format(\n\t\t\t\t\t\treservation.end,\n\t\t\t\t\t\t'HH:mm'\n\t\t\t\t\t)}`,\n\t\t\t\t\treservation.price,\n\t\t\t\t\treservation.taxRate,\n\t\t\t\t\tcurrencyCode,\n\t\t\t\t\t'1'\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tconst paypalTransaction = await createOrder(purchaseItems, currencyCode, discount, input.returnUrl, input.cancelUrl);\n\t\t\tawait ctx.prisma.reservation.update({\n\t\t\t\twhere: { id: reservation.id },\n\t\t\t\tdata: {\n\t\t\t\t\tpaypalTransactionId: paypalTransaction?.id,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn { reservation: undefined, paypalTransaction };\n\t\t}),\n\n\tcheckPaymentStatus: roleCheckProcedure(routerName, 'checkPaymentStatus')\n\t\t.input(z.string())\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst reservation = (await ctx.prisma.reservation.findMany({ where: { paypalTransactionId: input } }))[0];\n\n\t\t\tif (!reservation)\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\t\t\tmessage: 'Ihre Reservierung konnte nicht gefunden werden',\n\t\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tconst order = await capturePayment(input);\n\n\t\t\t\tif (\n\t\t\t\t\torder.result.status !== 'COMPLETED' ||\n\t\t\t\t\t!order.result.purchaseUnits ||\n\t\t\t\t\torder.result.purchaseUnits.length === 0 ||\n\t\t\t\t\torder.result.purchaseUnits[0] == undefined\n\t\t\t\t)\n\t\t\t\t\tthrow new Error();\n\n\t\t\t\tconst captures = order.result.purchaseUnits[0].payments?.captures;\n\t\t\t\tif (!captures || captures[0]?.status !== 'COMPLETED') throw new Error();\n\t\t\t\tconst amount = captures[0].amount;\n\t\t\t\tif (!amount) return;\n\n\t\t\t\tawait ctx.prisma.reservation.update({\n\t\t\t\t\twhere: { id: reservation.id },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tstatus: ReservationStatus.APPROVED,\n\t\t\t\t\t\tdeletedAt: null,\n\t\t\t\t\t\ttransactions: {\n\t\t\t\t\t\t\tcreate: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tuserId: reservation.ownerId,\n\t\t\t\t\t\t\t\t\tvalue: (reservation.price ?? 0) * -1,\n\t\t\t\t\t\t\t\t\tcurrency: amount.currencyCode,\n\t\t\t\t\t\t\t\t\treason: TransactionReason.COURT_RESERVATION,\n\t\t\t\t\t\t\t\t\tcreatedAt: reservation.createdAt,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tuserId: reservation.ownerId,\n\t\t\t\t\t\t\t\t\tvalue: parseFloat(amount.value),\n\t\t\t\t\t\t\t\t\tcurrency: amount.currencyCode,\n\t\t\t\t\t\t\t\t\treason: TransactionReason.ONLINE_PAYMENT,\n\t\t\t\t\t\t\t\t\tpaymentInformation: `paypal:${input}`,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\treturn {};\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tawait invalidateReservation(reservation.id);\n\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\t\t\tmessage: 'Die Transaktion wurde nicht erfolgreich abgeschlossen. Die Platzbuchung wird gelöscht.',\n\t\t\t\t});\n\t\t\t}\n\t\t}),\n\n\tpaymentCanceled: roleCheckProcedure(routerName, 'checkPaymentStatus')\n\t\t.input(z.string())\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst reservation = (await ctx.prisma.reservation.findMany({ where: { paypalTransactionId: input } }))[0];\n\t\t\tif (!reservation)\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\t\t\tmessage: 'Ihre Reservierung konnte nicht gefunden werden',\n\t\t\t\t});\n\n\t\t\tawait invalidateReservation(reservation.id);\n\t\t}),\n\n\tcancelReservation: roleCheckProcedure(routerName, 'cancelReservation')\n\t\t.input(z.string())\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst reservation = (await ctx.prisma.reservation.findMany({ where: { id: input } }))[0];\n\t\t\tif (!reservation)\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\t\t\tmessage: 'Ihre Reservierung konnte nicht gefunden werden',\n\t\t\t\t});\n\n\t\t\tif (ctx.permission !== PermissionState.ALL && ctx.session.id !== reservation.ownerId) throw new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tawait invalidateReservation(reservation.id);\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst reservationData = await ctx.prisma.reservation.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t\tcourtId: true,\n\t\t\t\t\tstart: true,\n\t\t\t\t\tend: true,\n\t\t\t\t\townerId: true,\n\t\t\t\t\tstatus: true,\n\t\t\t\t\tlight: true,\n\t\t\t\t\tradiator: true,\n\t\t\t\t\tfellows: true,\n\t\t\t\t\tprice: true,\n\t\t\t\t\ttaxRate: true,\n\t\t\t\t\tcourt: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\tarea: { select: { id: true, activeFrom: true, activeTo: true, bookableFrom: true } },\n\t\t\t\t\t\t\tactiveFrom: true,\n\t\t\t\t\t\t\tactiveTo: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttransactions: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t\t\tcurrency: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\treason: TransactionReason.COURT_RESERVATION,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!reservationData || (ctx.permission !== PermissionState.ALL && ctx.session.id !== reservationData.ownerId))\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tconst courtSpecifications = reservationData.court;\n\n\t\t\tif (courtSpecifications)\n\t\t\t\tawait checkReservationRules(\n\t\t\t\t\tReservationRuleCheckOn.DELETE,\n\t\t\t\t\treservationData as unknown as ReservationRawData,\n\t\t\t\t\tcourtSpecifications,\n\t\t\t\t\tctx.session?.roles\n\t\t\t\t);\n\n\t\t\tconst courtReservationTransaction = reservationData.transactions[0];\n\t\t\tawait ctx.prisma.reservation.update({\n\t\t\t\twhere: { id: input },\n\t\t\t\tdata: {\n\t\t\t\t\tdeletedAt: new Date(),\n\t\t\t\t\ttransactions: courtReservationTransaction\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\t\t\tvalue: courtReservationTransaction.value * -1, //give back the money for the whole reservation\n\t\t\t\t\t\t\t\t\tcurrency: courtReservationTransaction.currency,\n\t\t\t\t\t\t\t\t\treason: TransactionReason.COURT_RESERVATION_STORNO,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: undefined,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn {};\n\t\t}),\n\n\tdeleteAbo: roleCheckProcedure(routerName, 'deleteAbo')\n\t\t.input(z.string())\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst abonnementData = await ctx.prisma.abonnement.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\townerId: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!abonnementData || (ctx.permission !== PermissionState.ALL && ctx.session.id !== abonnementData.ownerId))\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tawait Promise.all([\n\t\t\t\tctx.prisma.abonnement.update({\n\t\t\t\t\twhere: { id: input },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tstatus: AbonnementStatus.DELETED,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tctx.prisma.reservation.updateMany({\n\t\t\t\t\twhere: { abonnementId: input, start: { gt: new Date() } },\n\t\t\t\t\tdata: { deletedAt: new Date() },\n\t\t\t\t}),\n\t\t\t]);\n\n\t\t\treturn {};\n\t\t}),\n\n\tdeleteUnapproved: publicProcedure.query(async ({ ctx }) => {\n\t\tawait ctx.prisma.reservation.updateMany({\n\t\t\twhere: { createdAt: { lt: subMinutes(new Date(), 15) }, status: ReservationStatus.REQUESTED, abonnementId: null },\n\t\t\tdata: { deletedAt: new Date() },\n\t\t});\n\n\t\treturn true;\n\t}),\n\n\tgetEmptyCourts: roleCheckProcedure(routerName, 'get')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tareaId: z.number().optional().nullable(),\n\t\t\t\tstart: z.date().min(new Date()).optional().nullable(),\n\t\t\t\tend: z.date().min(new Date()).optional().nullable(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ input, ctx }) => {\n\t\t\tconst { areaId, start, end } = input;\n\n\t\t\tif (!areaId || !start || !end) return [];\n\n\t\t\tconst availableCourts = await ctx.prisma.court.findMany({\n\t\t\t\tselect: { id: true, name: true, shortName: true, order: true },\n\t\t\t\torderBy: { order: 'asc' },\n\t\t\t\twhere: {\n\t\t\t\t\t//court needs to be active\n\t\t\t\t\tactive: true,\n\t\t\t\t\tOR: [\n\t\t\t\t\t\t{ activeFrom: { lt: start }, activeTo: { gt: start } },\n\t\t\t\t\t\t{ activeFrom: null, activeTo: null },\n\t\t\t\t\t],\n\t\t\t\t\t//and also area needs to be active\n\t\t\t\t\tarea: {\n\t\t\t\t\t\tid: areaId,\n\t\t\t\t\t\tOR: [\n\t\t\t\t\t\t\t{ activeFrom: { lt: start }, activeTo: { gt: start } },\n\t\t\t\t\t\t\t{ activeFrom: null, activeTo: null },\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\n\t\t\t\t\treservations: {\n\t\t\t\t\t\tnone: { OR: getBookingWhereClause(start, end) },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn availableCourts;\n\t\t}),\n});\n\nconst getBookingWhereClause = (startTime: Date, endTime: Date) => [\n\t{\n\t\t//Fall 1 + 2\n\t\t// neue Buchung beginnt vor alter Buchung, endet währenddessen oder gleichzeitig\n\t\tstart: { gte: startTime, lt: endTime },\n\t\tend: { gte: endTime },\n\t},\n\t{\n\t\t//Fall 3 + 4\n\t\t// Buchung beginnt während alter Buchung und Endet danach\n\t\tstart: { lte: startTime },\n\t\tend: { gt: startTime, lte: endTime },\n\t},\n\t{\n\t\t//Fall 5\n\t\t// Buchung beginnt und endet während alter\n\t\tstart: { equals: startTime },\n\t\tend: { equals: endTime },\n\t},\n\t{\n\t\t//Fall 6\n\t\t// Buchung beginnt nach oder während alter und endet vor alter\n\t\tstart: { lte: startTime },\n\t\tend: { gt: endTime },\n\t},\n\t{\n\t\t//Fall 7\n\t\t// Buchung beginnt vor alter und endet nach alter\n\t\tstart: { gt: startTime },\n\t\tend: { lt: endTime },\n\t},\n];\n\nconst getMultiCourtReservations = async (reservationData: ReservationRawData, courts: Array<string>, start: Date, end: Date) => {\n\tconst reservations = [];\n\tfor (const court of courts) {\n\t\tif (!(await isAvailable(start, end, court))) continue;\n\t\treservations.push({\n\t\t\t...reservationData,\n\t\t\tcourtId: court,\n\t\t});\n\t}\n\n\treturn reservations;\n};\n\nconst getReservationNotPossibleMessage = (checkBookable: CourtSpecifications) => {\n\treturn `Es sind noch keine Buchungen möglich. ${\n\t\tcheckBookable.area.bookableFrom\n\t\t\t? `Buchungen können erst ab dem ${formatDate(checkBookable.area.bookableFrom)} erstellt werden.`\n\t\t\t: checkBookable.activeFrom && checkBookable.activeTo\n\t\t\t? `Buchungen können vom ${formatDate(checkBookable.activeFrom)} - ${formatDate(checkBookable.activeTo)} erstellt werden.`\n\t\t\t: checkBookable.area.activeFrom && checkBookable.area.activeTo\n\t\t\t? `Buchungen können vom ${formatDate(checkBookable.area.activeFrom)} - ${formatDate(checkBookable.area.activeTo)} erstellt werden.`\n\t\t\t: 'Es können aktuell keine Buchungen getätigt werden.'\n\t}`;\n};\n\nexport const checkReservation = (reservationData: ReservationRawData, courtSpecifications: CourtSpecifications) => {\n\tconst { start } = reservationData;\n\n\tif (\n\t\t(start &&\n\t\t\t((courtSpecifications.activeFrom && isBefore(start, courtSpecifications.activeFrom)) ||\n\t\t\t\t(courtSpecifications.activeTo && isAfter(start, courtSpecifications.activeTo)) ||\n\t\t\t\t(courtSpecifications.area.activeFrom && isBefore(start, courtSpecifications.area.activeFrom)) ||\n\t\t\t\t(courtSpecifications.area.activeTo && isAfter(start, courtSpecifications.area.activeTo)))) ||\n\t\t(courtSpecifications.area.bookableFrom && isBefore(new Date(), courtSpecifications.area.bookableFrom))\n\t) {\n\t\tthrow new TRPCError({\n\t\t\tcode: 'CONFLICT',\n\t\t\tmessage: getReservationNotPossibleMessage(courtSpecifications),\n\t\t});\n\t}\n};\n\nconst checkReservationRules = async (\n\taction: ReservationRuleCheckOn,\n\treservationData: ReservationRawData,\n\tcourtSpecifications: CourtSpecifications,\n\troles?: Array<number> | null\n) => {\n\tconst { courtId } = reservationData;\n\tconst reservationRules = await prisma.reservationRule.findMany({\n\t\twhere: {\n\t\t\tcheckOn: action,\n\t\t\tOR: [{ affectedCourts: courtId ? { some: { id: courtId } } : undefined }, { affectedAreas: { some: { id: courtSpecifications.area.id } } }],\n\t\t\tvalidFor: roles\n\t\t\t\t? {\n\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\tid: roles[0],\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: undefined,\n\t\t},\n\t});\n\n\tfor (const reservationRule of reservationRules) {\n\t\tlet canBook = true;\n\t\t//eslint-disable-next-line no-prototype-builtins\n\t\tif (reservationRule.ruleCheckPluginName && ruleCheckPlugins.hasOwnProperty(reservationRule.ruleCheckPluginName)) {\n\t\t\tconst res = ruleCheckPlugins[reservationRule.ruleCheckPluginName](reservationData, reservationRule.value);\n\n\t\t\tif (typeof res === 'boolean') canBook = res;\n\t\t\telse canBook = await res;\n\n\t\t\tif (!canBook)\n\t\t\t\tthrow new TRPCError({\n\t\t\t\t\tcode: 'CONFLICT',\n\t\t\t\t\tmessage: reservationRule.errorDescription ?? 'Eine Buchungsregel verhindert deine Buchung.',\n\t\t\t\t});\n\t\t}\n\t}\n};\n\nconst invalidateReservation = (reservationId: string) =>\n\tprisma.reservation.update({\n\t\twhere: { id: reservationId },\n\t\tdata: {\n\t\t\tdeletedAt: new Date(),\n\t\t},\n\t});\n\ntype CourtSpecifications = {\n\tarea: {\n\t\tid: number;\n\t\tactiveFrom: Date | null;\n\t\tactiveTo: Date | null;\n\t\tbookableFrom: Date | null;\n\t};\n\tactiveFrom: Date | null;\n\tactiveTo: Date | null;\n};\n","import { ReservationType } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nexport const createReservationSchema = {\n\ttitle: z.string().optional(),\n\tstart: z.date(),\n\tduration: z.string(),\n\tcourtId: z.string(),\n\ttype: z.nativeEnum(ReservationType).optional(),\n\townerId: z.string().optional(),\n\tfellows: z.object({ id: z.string(), name: z.string() }).array().optional(),\n\t//admin special things\n\tcourts: z.string().array().optional(),\n\trepeatInterval: z.number().optional(),\n\trepeatUntil: z.date().optional(),\n\trepeatApproved: z.boolean().optional(),\n};\n\nexport const createReservationSchemaObject = z.object(createReservationSchema);\nexport type CreateReservationSchemaType = z.infer<typeof createReservationSchemaObject>;\n\nexport const getPriceSchema = {\n\tstart: z.date(),\n\tend: z.date(),\n\tcourtId: z.string(),\n};\n\nexport const updateReservationSchema = {\n\tid: z.string(),\n\ttitle: z.string().optional(),\n\tstart: z.date().optional(),\n\tend: z.date().optional(),\n\tcourtId: z.string().optional(),\n\ttype: z.nativeEnum(ReservationType).optional(),\n\townerId: z.string().optional(),\n\tfellows: z.string().array().optional(),\n\tlight: z.boolean().optional(),\n\tradiator: z.boolean().optional(),\n};\n","import { prisma } from 'db';\nimport type { ReservationRawData } from './type';\nimport { ReservationStatus } from 'db/databaseTypes';\nimport { addHours, subHours } from '../logic/date';\n\nexport const checkMaxBookingsAtSameTime = async (reservation: ReservationRawData, values: string) => {\n\tconst [hoursAround, maxBookings] = values.split(';');\n\n\tif (!hoursAround || !maxBookings) throw new Error('Wrong configuration, need to configure hoursAround;maxBookings');\n\n\tconst startBefore = subHours(reservation.start, parseInt(hoursAround));\n\tconst endAfter = addHours(reservation.end, parseInt(hoursAround));\n\n\tconst reservations = await prisma.reservation.count({\n\t\twhere: {\n\t\t\tstart: { gte: startBefore },\n\t\t\tend: { lte: endAfter },\n\t\t\tOR: [{ ownerId: reservation.ownerId }, { fellows: { some: { id: reservation.ownerId } } }],\n\n\t\t\tstatus: ReservationStatus.APPROVED,\n\t\t},\n\t});\n\n\treturn reservations < parseInt(maxBookings);\n};\n","import type { ReservationRawData } from './type';\nimport { differenceInMinutes } from '../logic/date';\n\nexport const checkMaxDuration = (reservation: ReservationRawData, value: string) => {\n\tconst val = parseInt(value);\n\tconst duration = differenceInMinutes(reservation.end, reservation.start);\n\n\treturn val >= duration;\n};\n","import type { ReservationRawData } from './type';\nimport { isBefore, subMinutes } from '../logic/date';\n\n//MaxTime Before means: I can book a court e.g. 3h before the booking starts\nexport const checkMaxTimeBefore = (reservation: ReservationRawData, value: string) => {\n\tconst earliestBookableTime = subMinutes(reservation.start, parseInt(value));\n\treturn isBefore(earliestBookableTime, new Date());\n};\n","import type { ReservationRawData } from './type';\nimport { differenceInMinutes } from '../logic/date';\n\nexport const checkMinDuration = (reservation: ReservationRawData, value: string) => {\n\tconst val = parseInt(value);\n\tconst duration = differenceInMinutes(reservation.end, reservation.start);\n\n\treturn val <= duration;\n};\n","import type { ReservationRawData } from './type';\nimport { isBefore, subMinutes } from '../logic/date';\n\n//MaxTime Before means: I can book a court e.g. until 10minutes before the booking starts\nexport const checkMinTimeBefore = (reservation: ReservationRawData, value: string) => {\n\tconst latestBookableTime = subMinutes(reservation.start, parseInt(value));\n\treturn isBefore(new Date(), latestBookableTime);\n};\n","import { checkMaxBookingsAtSameTime } from './maxBookingsAtSameTime';\nimport { checkMaxDuration } from './maxDuration';\nimport { checkMaxTimeBefore } from './maxTimeBefore';\nimport { checkMinDuration } from './minDuration';\nimport { checkMinTimeBefore } from './minTimeBefore';\nimport type { RuleCheckPlugins } from './type';\n\nexport const ruleCheckPlugins: RuleCheckPlugins = {\n\tmaxTimeBefore: checkMaxTimeBefore,\n\tminTimeBefore: checkMinTimeBefore,\n\tminDuration: checkMinDuration,\n\tmaxDuration: checkMaxDuration,\n\tmaxBookingsAtSameTime: checkMaxBookingsAtSameTime,\n};\n","import { PermissionState, TransactionReason } from 'db/databaseTypes';\nimport { TRPCError } from '@trpc/server';\nimport { z } from 'zod';\n\nimport { transactionSchema } from 'schemes/transaction';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'transaction';\nexport const transactionRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(z.object(transactionSchema))\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.transaction.create({\n\t\t\t\tdata: {\n\t\t\t\t\tuserId: input.userId,\n\t\t\t\t\treason: input.reason,\n\t\t\t\t\tvalue: input.value,\n\t\t\t\t\tcurrency: input.currency,\n\t\t\t\t\treservationId: input.reservationId,\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\n\tbalance: roleCheckProcedure(routerName, 'balance')\n\t\t.input(z.string().optional())\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst userId = input ?? ctx.session.id;\n\t\t\tif (ctx.permission !== PermissionState.ALL && ctx.permission === PermissionState.OWN && userId !== ctx.session.id)\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\treturn ctx.prisma.transaction.groupBy({\n\t\t\t\tby: ['userId'],\n\t\t\t\twhere: { userId, deleted: false },\n\t\t\t\t_sum: { value: true },\n\t\t\t});\n\t\t}),\n\n\tlist: roleCheckProcedure(routerName, 'list')\n\t\t.input(z.string().optional())\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst userId = input ?? ctx.session.id;\n\t\t\tif (ctx.permission !== PermissionState.ALL && ctx.permission === PermissionState.OWN && userId !== ctx.session.id)\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\treturn ctx.prisma.transaction.findMany({\n\t\t\t\twhere: { userId, deleted: false },\n\t\t\t\torderBy: [{ createdAt: 'desc' }],\n\t\t\t\ttake: 50,\n\t\t\t});\n\t\t}),\n\n\trefund: roleCheckProcedure(routerName, 'refund')\n\t\t.input(z.string())\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst transaction = await ctx.prisma.transaction.findUnique({ where: { id: input } });\n\t\t\tif (transaction === null) throw new TRPCError({ code: 'BAD_REQUEST' });\n\n\t\t\treturn ctx.prisma.transaction.create({\n\t\t\t\tdata: {\n\t\t\t\t\t...transaction,\n\t\t\t\t\tid: undefined,\n\t\t\t\t\tvalue: transaction.value * -1,\n\t\t\t\t\treason: TransactionReason.REFUND,\n\t\t\t\t\tcreatedAt: undefined,\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n});\n","import { TransactionReason } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nexport const transactionSchema = {\n\tuserId: z.string(),\n\treason: z.nativeEnum(TransactionReason),\n\tvalue: z.number(),\n\tcurrency: z.string(),\n\treservationId: z.string().nullable().optional(),\n};\n\nexport const transactionSchemaObject = z.object(transactionSchema);\n","import {\n\tAmountWithBreakdown,\n\tApiError,\n\tCheckoutPaymentIntent,\n\tClient,\n\tEnvironment,\n\tItem,\n\tItemCategory,\n\tLogLevel,\n\tOrderRequest,\n\tOrdersController,\n} from '@paypal/paypal-server-sdk';\nimport { env } from 'utils/env';\n\nimport { getTaxValueFromGross } from 'utils/backend';\n\nconst { PAYPAL_ID, PAYPAL_SECRET, NODE_ENV } = env;\n\nconst client = new Client({\n\tclientCredentialsAuthCredentials: {\n\t\toAuthClientId: PAYPAL_ID,\n\t\toAuthClientSecret: PAYPAL_SECRET,\n\t},\n\ttimeout: 0,\n\tenvironment: NODE_ENV === 'production' ? Environment.Production : Environment.Sandbox,\n\tlogging: {\n\t\tlogLevel: LogLevel.Info,\n\t\tlogRequest: {\n\t\t\tlogBody: true,\n\t\t},\n\t\tlogResponse: {\n\t\t\tlogHeaders: true,\n\t\t},\n\t},\n});\nconst ordersController = new OrdersController(client);\n\nexport const createOrder = async (purchaseItems: Item[], currency_code = 'eur', discount = 0, returnUrl?: string, cancelUrl?: string) => {\n\tconst experienceContext = returnUrl && cancelUrl ? { returnUrl, cancelUrl } : undefined;\n\n\tconst collect: { body: OrderRequest; prefer: string } = {\n\t\tbody: {\n\t\t\tintent: CheckoutPaymentIntent.Capture,\n\t\t\tpurchaseUnits: [\n\t\t\t\t{\n\t\t\t\t\tdescription: 'Platzbuchung beim TC Schönbusch',\n\t\t\t\t\titems: purchaseItems,\n\t\t\t\t\tamount: createAmount(purchaseItems, currency_code, discount),\n\t\t\t\t},\n\t\t\t],\n\t\t\tpaymentSource: {\n\t\t\t\tcard: { experienceContext },\n\t\t\t\tpaypal: { experienceContext },\n\t\t\t\tapplePay: { experienceContext },\n\t\t\t\tgooglePay: { experienceContext },\n\t\t\t},\n\t\t},\n\t\tprefer: 'return=minimal',\n\t};\n\n\ttry {\n\t\tconst { result } = await ordersController.createOrder(collect);\n\n\t\treturn result;\n\t} catch (error) {\n\t\tif (error instanceof ApiError) {\n\t\t\tconst errors = error.result;\n\t\t\tconsole.error(errors);\n\t\t}\n\t\treturn undefined;\n\t}\n};\n\nexport const capturePayment = (id: string) => ordersController.captureOrder({ id });\n\nexport const createPurchaseItem = (title: string, value: number, taxRate: number, currencyCode = 'eur', quantity = '1'): Item => {\n\tconst taxValue = getTaxValueFromGross(value, taxRate);\n\n\treturn {\n\t\tname: title,\n\t\tquantity: quantity,\n\t\tunitAmount: {\n\t\t\tcurrencyCode,\n\t\t\tvalue: (value - taxValue).toFixed(2).toString(),\n\t\t},\n\t\ttax: {\n\t\t\tcurrencyCode,\n\t\t\tvalue: taxValue.toFixed(2).toString(),\n\t\t},\n\t\tcategory: ItemCategory.DigitalGoods,\n\t};\n};\n\nconst createAmount = (items: Array<Item>, currencyCode = 'eur', discount = 0): AmountWithBreakdown => {\n\tlet netTotal = 0;\n\tlet taxTotal = 0;\n\n\tfor (const i of items) {\n\t\tnetTotal += parseFloat(i.unitAmount.value) * parseFloat(i.quantity);\n\t\ttaxTotal += i.tax ? parseFloat(i.tax.value) * parseFloat(i.quantity) : 0;\n\t}\n\n\treturn {\n\t\tcurrencyCode,\n\t\tvalue: (netTotal + taxTotal - discount).toFixed(2),\n\t\tbreakdown: {\n\t\t\titemTotal: { currencyCode, value: netTotal.toFixed(2) },\n\t\t\ttaxTotal: { currencyCode, value: taxTotal.toFixed(2) },\n\t\t\tdiscount: { currencyCode, value: discount.toFixed(2) },\n\t\t},\n\t};\n};\n","import { z } from 'zod';\n\nimport { courtSchema, courtSchemaObject } from 'schemes/court';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst selectList = {\n\tid: true,\n\tname: true,\n\tshortName: true,\n\tactive: true,\n\tactiveFrom: true,\n\tactiveTo: true,\n\torder: true,\n\tarea: {\n\t\tselect: { id: true, shortName: true },\n\t},\n\t_count: true,\n};\n\nconst routerName = 'court';\nexport const courtRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(courtSchemaObject)\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.court.create({\n\t\t\t\tdata: input,\n\t\t\t})\n\t\t),\n\tlist: roleCheckProcedure(routerName, 'list').query(({ ctx }) =>\n\t\tctx.prisma.court.findMany({\n\t\t\tselect: selectList,\n\t\t\torderBy: [{ order: 'asc' }, { name: 'asc' }],\n\t\t})\n\t),\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(({ ctx, input }) =>\n\t\t\tctx.prisma.court.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\tshortName: true,\n\t\t\t\t\tdescription: true,\n\t\t\t\t\tactive: true,\n\t\t\t\t\tactiveFrom: true,\n\t\t\t\t\tactiveTo: true,\n\t\t\t\t\tareaId: true,\n\t\t\t\t\torder: true,\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(z.object({ id: z.string(), ...courtSchema }))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\treturn ctx.prisma.court.update({\n\t\t\t\twhere: { id },\n\t\t\t\tdata,\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.court.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { z } from 'zod';\n\nexport const courtSchema = {\n  name: z.string(),\n  shortName: z.string().nullable(),\n  description: z.string().nullable().optional(),\n  active: z.boolean().optional(),\n  activeFrom: z.date().nullable().optional(),\n  activeTo: z.date().nullable().optional(),\n  areaId: z.number(),\n  order: z.number().nullable().optional(),\n};\n\nexport const courtSchemaObject = z.object(courtSchema);\n","import { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'dashboard';\nexport const dashboardRouter = createTRPCRouter({\n\tgetMyNextReservations: roleCheckProcedure(routerName, 'getMyNextReservations').query(({ ctx }) => {\n\t\treturn ctx.prisma.reservation.findMany({\n\t\t\twhere: {\n\t\t\t\tOR: [{ ownerId: ctx.session.id }, { fellows: { some: { id: ctx.session.id } } }],\n\t\t\t\tend: { gt: new Date() },\n\t\t\t\tdeletedAt: null,\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tid: true,\n\t\t\t\ttitle: true,\n\t\t\t\tstart: true,\n\t\t\t\tend: true,\n\t\t\t\tcourt: { select: { name: true } },\n\t\t\t\tabonnementId: true,\n\t\t\t\tfellows: { select: { name: true } },\n\t\t\t},\n\t\t\torderBy: { start: 'asc' },\n\t\t\ttake: 4,\n\t\t});\n\t}),\n\n\tneedsSetup: roleCheckProcedure(routerName, 'needsSetup').query(({ ctx }) =>\n\t\tctx.prisma.user.findUnique({ where: { id: ctx.session.id }, select: { needsSetup: true } })\n\t),\n});\n","import { z } from 'zod';\n\nimport { eventCategoriesSchemaObject } from 'schemes/eventCategories';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst routerName = 'eventCategories';\nexport const eventCategoriesRouter = createTRPCRouter({\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(eventCategoriesSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\treturn ctx.prisma.eventCategory.upsert({\n\t\t\t\twhere: { id: id ?? '' },\n\t\t\t\tcreate: data,\n\t\t\t\tupdate: data,\n\t\t\t});\n\t\t}),\n\n\tlist: publicProcedure.query(({ ctx }) =>\n\t\tctx.prisma.eventCategory.findMany({\n\t\t\torderBy: [{ title: 'asc' }],\n\t\t\tinclude: { _count: true },\n\t\t})\n\t),\n\n\tget: publicProcedure.input(z.string()).query(async ({ input, ctx }) =>\n\t\tctx.prisma.eventCategory.findUnique({\n\t\t\twhere: { id: input },\n\t\t\tinclude: { _count: true },\n\t\t})\n\t),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.eventCategory.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { z } from 'zod';\n\nexport const eventCategoriesSchema = {\n  id: z.string().optional(),\n  slug: z.string(),\n  title: z.string(),\n};\n\nexport const eventCategoriesSchemaObject = z.object(eventCategoriesSchema);\n","import { z } from 'zod';\n\nimport { eventSchemaObject } from 'schemes/event';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst include = { _count: true, category: { select: { title: true } } };\n\nconst routerName = 'events';\nexport const eventsRouter = createTRPCRouter({\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(eventSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\treturn ctx.prisma.event.upsert({\n\t\t\t\twhere: { id: id ?? '' },\n\t\t\t\tcreate: data,\n\t\t\t\tupdate: data,\n\t\t\t});\n\t\t}),\n\n\tlist: publicProcedure\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.string().nullish(),\n\t\t\t\tfilterByCategory: z.string().optional(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst limit = input.limit ?? 50;\n\t\t\tconst { cursor } = input;\n\t\t\tconst items = await ctx.prisma.event.findMany({\n\t\t\t\ttake: limit + 1, // get an extra item at the end which we'll use as next cursor\n\t\t\t\twhere: input.filterByCategory ? { categoryId: input.filterByCategory } : undefined,\n\t\t\t\tcursor: cursor ? { id: cursor } : undefined,\n\t\t\t\torderBy: [{ start: 'asc' }],\n\t\t\t\tinclude,\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tif (nextItem) nextCursor = nextItem.id;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tlistUpcoming: publicProcedure\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.string().nullish(),\n\t\t\t\tfilterByCategorySlug: z.string().optional(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst limit = input.limit ?? 5;\n\t\t\tconst { cursor } = input;\n\t\t\tconst items = await ctx.prisma.event.findMany({\n\t\t\t\ttake: limit + 1, // get an extra item at the end which we'll use as next cursor\n\t\t\t\twhere: {\n\t\t\t\t\tcategory: input.filterByCategorySlug ? { slug: input.filterByCategorySlug } : undefined,\n\t\t\t\t\tend: { gte: new Date() },\n\t\t\t\t},\n\t\t\t\tcursor: cursor ? { id: cursor } : undefined,\n\t\t\t\torderBy: [{ start: 'asc' }],\n\t\t\t\tinclude,\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tif (nextItem) nextCursor = nextItem.id;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tget: publicProcedure.input(z.string()).query(async ({ input, ctx }) =>\n\t\tctx.prisma.event.findUnique({\n\t\t\twhere: { id: input },\n\t\t\tinclude,\n\t\t})\n\t),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.event.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n\n\tlistEventLocations: publicProcedure.query(async ({ ctx }) => {\n\t\tconst result: Array<string> = [];\n\t\tconst locations = await ctx.prisma.event.findMany({\n\t\t\tselect: { location: true },\n\t\t\twhere: { location: { not: null } },\n\t\t\tdistinct: ['location'],\n\t\t});\n\n\t\tfor (const location of locations) {\n\t\t\tif (location.location) result.push(location.location);\n\t\t}\n\n\t\treturn result;\n\t}),\n});\n","import { z } from 'zod';\n\nexport const eventSchema = {\n  id: z.string().optional(),\n  title: z.string(),\n  description: z.string().nullable().optional(),\n  categoryId: z.string(),\n  image: z.string().nullable().optional(),\n  start: z.date(),\n  end: z.date().nullable().optional(),\n  canceled: z.boolean().optional(),\n  revised: z.boolean().optional(),\n  link: z.string().nullable().optional(),\n  location: z.string().nullable().optional(),\n};\n\nexport const eventSchemaObject = z.object(eventSchema);\n","import { z } from 'zod';\n\nimport { HallencardStatus, createHallencardSchema, useHallencardForAnotherPersonSchema, useHallencardSchema } from 'schemes/hallencard';\nimport { createHallencardCode, createHallencardPin } from 'utils/backend';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\nimport { TransactionReason } from 'db/databaseTypes';\n\nconst routerName = 'hallencard';\nexport const hallencardRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(z.object(createHallencardSchema))\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.hallencard.create({\n\t\t\t\tdata: {\n\t\t\t\t\tcode: createHallencardCode(),\n\t\t\t\t\tpin: createHallencardPin().toString(),\n\t\t\t\t\tvalue: input.value,\n\t\t\t\t\tprinted: false,\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\n\tlist: roleCheckProcedure(routerName, 'list')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.string().nullish(),\n\t\t\t\tstatus: z.nativeEnum(HallencardStatus).nullish(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst limit = input.limit ?? 50;\n\t\t\tconst { cursor, status } = input;\n\n\t\t\tlet whereClause: { printed: boolean; transactionId: object | null } = {\n\t\t\t\tprinted: true,\n\t\t\t\ttransactionId: { not: null },\n\t\t\t};\n\t\t\tif (status === HallencardStatus.CREATED) whereClause = { printed: false, transactionId: null };\n\t\t\tif (status === HallencardStatus.PRINTED) whereClause = { printed: true, transactionId: null };\n\t\t\tconst items = await ctx.prisma.hallencard.findMany({\n\t\t\t\tselect: {\n\t\t\t\t\tcode: true,\n\t\t\t\t\tprinted: true,\n\t\t\t\t\tvalue: true,\n\t\t\t\t\ttransaction: { select: { user: { select: { name: true, image: true } } } },\n\t\t\t\t},\n\t\t\t\tcursor: cursor ? { code: cursor } : undefined,\n\t\t\t\twhere: whereClause,\n\t\t\t\torderBy: [{ code: 'asc' }],\n\t\t\t\ttake: limit + 1,\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tif (nextItem) nextCursor = nextItem.code;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tprint: roleCheckProcedure(routerName, 'print')\n\t\t.input(z.string())\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst card = await ctx.prisma.hallencard.findUnique({\n\t\t\t\twhere: { code: input },\n\t\t\t});\n\t\t\t//TODO: print logic\n\t\t\treturn ctx.prisma.hallencard.update({ where: { code: card?.code }, data: { printed: true } });\n\t\t}),\n\n\toverview: roleCheckProcedure(routerName, 'overview').query(async ({ ctx }) => {\n\t\tconst [myHallencards, myCurrentValue] = await Promise.all([\n\t\t\tctx.prisma.hallencard.findMany({\n\t\t\t\tselect: { code: true, value: true, transaction: { select: { createdAt: true } } },\n\t\t\t\twhere: { transaction: { userId: ctx.session.id } },\n\t\t\t\torderBy: { transaction: { createdAt: 'desc' } },\n\t\t\t\ttake: 10,\n\t\t\t}),\n\t\t\tctx.prisma.transaction.groupBy({\n\t\t\t\tby: ['userId'],\n\t\t\t\twhere: { userId: ctx.session.id, deleted: false },\n\t\t\t\t_sum: { value: true },\n\t\t\t}),\n\t\t]);\n\n\t\treturn { myHallencards, myCurrentValue };\n\t}),\n\n\tuse: roleCheckProcedure(routerName, 'use')\n\t\t.input(z.object(useHallencardSchema))\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst hallencard = await ctx.prisma.hallencard.findFirstOrThrow({\n\t\t\t\twhere: { code: input.code, pin: input.pin, transactionId: null },\n\t\t\t});\n\t\t\treturn ctx.prisma.transaction.create({\n\t\t\t\tdata: {\n\t\t\t\t\tvalue: hallencard.value,\n\t\t\t\t\tcurrency: 'EUR',\n\t\t\t\t\treason: TransactionReason.HALLENCARD_RECHARGE,\n\t\t\t\t\thallencard: { connect: { code: hallencard.code } },\n\t\t\t\t\tuser: { connect: { id: ctx.session.id } },\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tuseForAnotherPerson: roleCheckProcedure(routerName, 'useForAnotherPerson')\n\t\t.input(z.object(useHallencardForAnotherPersonSchema))\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst hallencard = await ctx.prisma.hallencard.findFirstOrThrow({\n\t\t\t\twhere: { code: input.code, transactionId: null },\n\t\t\t});\n\t\t\tawait ctx.prisma.hallencard.update({ where: { code: input.code }, data: { printed: true } });\n\t\t\treturn ctx.prisma.transaction.create({\n\t\t\t\tdata: {\n\t\t\t\t\tvalue: hallencard.value,\n\t\t\t\t\tcurrency: 'EUR',\n\t\t\t\t\treason: TransactionReason.HALLENCARD_RECHARGE,\n\t\t\t\t\thallencard: { connect: { code: hallencard.code } },\n\t\t\t\t\tuser: { connect: { id: input.userId } },\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n});\n","import { z } from 'zod';\n\nexport const createHallencardSchema = {\n\tvalue: z.number(),\n};\n\nexport const createHallencardSchemaObject = z.object(createHallencardSchema);\n\nexport const useHallencardSchema = {\n\tcode: z.string(),\n\tpin: z.string().length(6),\n};\n\nexport const useHallencardForAnotherPersonSchema = {\n\tcode: z.string(),\n\tuserId: z.string(),\n};\n\nexport enum HallencardStatus {\n\tCREATED = 'CREATED',\n\tPRINTED = 'PRINTED',\n\tUSED = 'USED',\n}\n","import { PermissionState } from 'db/databaseTypes';\nimport { TRPCError } from '@trpc/server';\nimport { z } from 'zod';\n\nimport { notificationSchema } from 'schemes/notification';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'notification';\nexport const notificationRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(z.object(notificationSchema))\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.notification.create({\n\t\t\t\tdata: input,\n\t\t\t})\n\t\t),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(async ({ ctx, input }) =>\n\t\t\tctx.prisma.notification.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n\n\tlist: roleCheckProcedure(routerName, 'list')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.string().nullish(),\n\t\t\t\tall: z.boolean().optional(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst limit = input.limit ?? 50;\n\t\t\tconst { cursor } = input;\n\t\t\tconst today = new Date();\n\n\t\t\tif (input.all && ctx.permission !== PermissionState.ALL) throw new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tconst items = await ctx.prisma.notification.findMany({\n\t\t\t\tselect: { id: true, title: true, message: true, severity: true, showFrom: !!input.all, showTo: !!input.all },\n\t\t\t\twhere: input.all ? undefined : { showFrom: { lte: today }, showTo: { gte: today } },\n\t\t\t\torderBy: [{ showFrom: 'asc' }],\n\t\t\t\ttake: input.all ? limit + 1 : undefined,\n\t\t\t\tcursor: cursor ? { id: cursor } : undefined,\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tnextCursor = nextItem?.id;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(z.object({ id: z.string(), ...notificationSchema }))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\treturn ctx.prisma.notification.update({\n\t\t\t\twhere: { id },\n\t\t\t\tdata,\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.notification.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { NotificationSeverity } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nexport const notificationSchema = {\n\ttitle: z.string(),\n\tmessage: z.string().nullable().optional(),\n\tseverity: z.nativeEnum(NotificationSeverity),\n\tshowFrom: z.date(),\n\tshowTo: z.date(),\n};\n\nexport const notificationSchemaObject = z.object(notificationSchema);\n","import { z } from 'zod';\n\nimport { organisationMemberSchemaObject } from 'schemes/organisationMember';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst routerName = 'organisationMembers';\nexport const organisationMembersRouter = createTRPCRouter({\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(organisationMemberSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, childMembers, ...data } = input;\n\t\t\tconst children = childMembers?.map((value) => ({ id: value }));\n\n\t\t\treturn ctx.prisma.organisationMember.upsert({\n\t\t\t\twhere: { id: id ?? '' },\n\t\t\t\tcreate: { ...data, childMembers: { connect: children } },\n\t\t\t\tupdate: { ...data, childMembers: { set: children } },\n\t\t\t});\n\t\t}),\n\n\tlist: publicProcedure\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.string().nullish(),\n\t\t\t\torganisation: z.string(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst limit = input.limit ?? 50;\n\t\t\tconst { cursor } = input;\n\t\t\tconst items = await ctx.prisma.organisationMember.findMany({\n\t\t\t\ttake: limit + 1, // get an extra item at the end which we'll use as next cursor\n\t\t\t\tcursor: cursor ? { id: cursor } : undefined,\n\t\t\t\torderBy: { orderID: 'asc' },\n\t\t\t\twhere: { OR: [{ organisationId: input.organisation }, { organisation: { slug: input.organisation } }] },\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tif (nextItem) nextCursor = nextItem.id;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tget: publicProcedure.input(z.string()).query(async ({ input, ctx }) =>\n\t\tctx.prisma.organisationMember.findUnique({\n\t\t\twhere: { id: input },\n\t\t\tinclude: {\n\t\t\t\tchildMembers: { select: { id: true } },\n\t\t\t},\n\t\t})\n\t),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.organisationMember.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { z } from 'zod';\n\nexport const organisationMemberSchema = {\n  id: z.string().optional(),\n  fullName: z.string(),\n  function: z.string().optional().nullable(),\n  image: z.string().optional().nullable(),\n  email: z.string().optional().nullable(),\n  phone: z.string().optional().nullable(),\n\n  orderID: z.number().optional().nullable(),\n  organisationId: z.string(),\n  parentMemberId: z.string().optional().nullable(),\n  childMembers: z.string().array().optional().nullable(),\n};\n\nexport const organisationMemberSchemaObject = z.object(organisationMemberSchema);\n","import { z } from 'zod';\n\nimport { organisationSchemaObject } from 'schemes/organisation';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst routerName = 'organisations';\nexport const organisationsRouter = createTRPCRouter({\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(organisationSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\treturn ctx.prisma.organisation.upsert({\n\t\t\t\twhere: { id: id ?? '' },\n\t\t\t\tcreate: data,\n\t\t\t\tupdate: data,\n\t\t\t});\n\t\t}),\n\n\tlist: publicProcedure\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.string().nullish(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst limit = input.limit ?? 50;\n\t\t\tconst { cursor } = input;\n\t\t\tconst items = await ctx.prisma.organisation.findMany({\n\t\t\t\ttake: limit + 1, // get an extra item at the end which we'll use as next cursor\n\t\t\t\tcursor: cursor ? { id: cursor } : undefined,\n\t\t\t\torderBy: [{ title: 'asc' }],\n\t\t\t\tinclude: { _count: true },\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tif (nextItem) nextCursor = nextItem.id;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tget: publicProcedure.input(z.string().optional()).query(async ({ input, ctx }) =>\n\t\tinput\n\t\t\t? ctx.prisma.organisation.findFirst({\n\t\t\t\t\twhere: { OR: [{ slug: input }, { id: input }] },\n\t\t\t\t\tinclude: { members: { orderBy: { orderID: 'asc' } } },\n\t\t\t  })\n\t\t\t: null\n\t),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.organisation.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { z } from 'zod';\n\nexport const organisationSchema = {\n  id: z.string().optional(),\n  slug: z.string(),\n  title: z.string(),\n};\n\nexport const organisationSchemaObject = z.object(organisationSchema);\n","import { PermissionState } from 'db/databaseTypes';\nimport { TRPCError } from '@trpc/server';\nimport { z } from 'zod';\n\nimport { ApplicationDialogPermission } from 'utils/backend';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst primaryCheck = {\n\trouter: z.string(),\n\taction: z.string(),\n\tuserRoleId: z.number(),\n};\n\nconst allowedCheck = z.nativeEnum(PermissionState);\n\nconst routerName = 'permission';\nexport const permissionRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\t...primaryCheck,\n\t\t\t\tallowed: allowedCheck,\n\t\t\t})\n\t\t)\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.permission.create({\n\t\t\t\tdata: input,\n\t\t\t})\n\t\t),\n\n\tcreateMany: roleCheckProcedure(routerName, 'createMany')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tuserRoleId: z.number(),\n\t\t\t\trouter: z.string(),\n\t\t\t\tactions: z.string().array(),\n\t\t\t\tallowed: allowedCheck,\n\t\t\t})\n\t\t)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { userRoleId, router, allowed } = input;\n\n\t\t\tconst newPermissions = input.actions.map((action) => ({ userRoleId, router, allowed, action }));\n\t\t\treturn ctx.prisma.permission.createMany({\n\t\t\t\tdata: newPermissions,\n\t\t\t});\n\t\t}),\n\n\tlist: roleCheckProcedure(routerName, 'list')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.object(primaryCheck).nullish(),\n\t\t\t\tfilterByRoleId: z.number().optional(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tif (ctx.permission !== PermissionState.ALL) throw new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tconst limit = input.limit ?? 50;\n\t\t\tconst { cursor } = input;\n\t\t\tconst items = await ctx.prisma.permission.findMany({\n\t\t\t\ttake: limit + 1, // get an extra item at the end which we'll use as next cursor\n\t\t\t\twhere: { userRoleId: input.filterByRoleId },\n\t\t\t\tcursor: cursor ? { router_action_userRoleId: cursor } : undefined,\n\t\t\t\torderBy: [{ router: 'asc' }, { action: 'asc' }],\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tif (nextItem) {\n\t\t\t\t\tnextCursor = {\n\t\t\t\t\t\trouter: nextItem.router,\n\t\t\t\t\t\taction: nextItem.action,\n\t\t\t\t\t\tuserRoleId: nextItem.userRoleId,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tgetByRouterAndRoleId: roleCheckProcedure(routerName, 'getByRouterAndRoleId')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\trouter: z.string(),\n\t\t\t\tuserRoleId: z.number(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ input, ctx }) => {\n\t\t\tconst { router, userRoleId } = input;\n\t\t\tconst permissions: { action: string }[] = await ctx.prisma.permission.findMany({\n\t\t\t\twhere: { router, userRoleId },\n\t\t\t\tselect: { action: true },\n\t\t\t});\n\t\t\treturn permissions.map((item) => item.action);\n\t\t}),\n\n\tgetApplicationDialogPermission: roleCheckProcedure(routerName, 'getApplicationDialogPermission')\n\t\t.input(z.nativeEnum(ApplicationDialogPermission))\n\t\t.query(async ({ input, ctx }) => {\n\t\t\tconst permissions = await ctx.prisma.permission.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tuserRoleId: { in: ctx.session?.roles ?? [] },\n\t\t\t\t\trouter: 'applicationDialogPermissions',\n\t\t\t\t\taction: input,\n\t\t\t\t},\n\t\t\t\tselect: { allowed: true },\n\t\t\t});\n\n\t\t\tlet highestPermission: PermissionState = PermissionState.NONE;\n\t\t\tfor (const permission of permissions) {\n\t\t\t\tif (permission.allowed === PermissionState.OWN) highestPermission = PermissionState.OWN;\n\t\t\t\tif (permission.allowed === PermissionState.ALL) return PermissionState.ALL;\n\t\t\t}\n\t\t\treturn highestPermission;\n\t\t}),\n\n\tgetMenuPermissions: roleCheckProcedure(routerName, 'getMenuPermissions').query(async ({ ctx }) => {\n\t\tif (ctx.session) {\n\t\t\tconst permissions = await ctx.prisma.permission.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tuserRoleId: { in: ctx.session?.roles ?? [] },\n\t\t\t\t\trouter: 'menuPermissions',\n\t\t\t\t\tallowed: PermissionState.ALL,\n\t\t\t\t},\n\t\t\t\tselect: { action: true },\n\t\t\t});\n\n\t\t\tconst result: Array<string> = [];\n\t\t\tfor (const permission of permissions) {\n\t\t\t\tif (!result.includes(permission.action)) result.push(permission.action);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\t...primaryCheck,\n\t\t\t\tallowed: allowedCheck,\n\t\t\t})\n\t\t)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { router, action, userRoleId, allowed } = input;\n\t\t\treturn ctx.prisma.permission.update({\n\t\t\t\twhere: { router_action_userRoleId: { router, action, userRoleId } },\n\t\t\t\tdata: { allowed },\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.object(primaryCheck))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\treturn ctx.prisma.permission.delete({\n\t\t\t\twhere: { router_action_userRoleId: input },\n\t\t\t});\n\t\t}),\n});\n","import { z } from 'zod';\n\nimport { priceSchema } from 'schemes/price';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'price';\nexport const priceRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(z.object(priceSchema))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { roles, areas, from, to, ...rest } = input;\n\t\t\tconst rolesToAdd = roles.map((item) => ({ id: parseInt(item) }));\n\t\t\tconst areasToAdd = areas.map((item) => ({ id: parseInt(item) }));\n\t\t\treturn ctx.prisma.price.create({\n\t\t\t\tdata: {\n\t\t\t\t\t...rest,\n\t\t\t\t\tfrom: parseInt(from.replace(':', '')),\n\t\t\t\t\tto: parseInt(to.replace(':', '')),\n\t\t\t\t\troles: { connect: rolesToAdd },\n\t\t\t\t\tareas: { connect: areasToAdd },\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(async ({ ctx, input }) =>\n\t\t\tctx.prisma.price.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tvalidFrom: true,\n\t\t\t\t\tvalidTo: true,\n\t\t\t\t\troles: { select: { id: true, title: true } },\n\t\t\t\t\tareas: { select: { id: true, name: true } },\n\t\t\t\t\tisDefault: true,\n\t\t\t\t\tmon: true,\n\t\t\t\t\ttue: true,\n\t\t\t\t\twed: true,\n\t\t\t\t\tthu: true,\n\t\t\t\t\tfri: true,\n\t\t\t\t\tsat: true,\n\t\t\t\t\tsun: true,\n\t\t\t\t\tfrom: true,\n\t\t\t\t\tto: true,\n\t\t\t\t\tvalue: true,\n\t\t\t\t\ttaxes: true,\n\t\t\t\t\tcurrency: true,\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\n\tlist: roleCheckProcedure(routerName, 'list')\n\t\t.input(\n\t\t\tz.object({\n\t\t\t\tlimit: z.number().min(1).max(100).nullish(),\n\t\t\t\tcursor: z.string().nullish(),\n\t\t\t\tfilterByRoleId: z.number().optional(),\n\t\t\t})\n\t\t)\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tconst limit = input.limit ?? 50;\n\t\t\tconst { cursor } = input;\n\n\t\t\tconst items = await ctx.prisma.price.findMany({\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tvalidFrom: true,\n\t\t\t\t\tvalidTo: true,\n\t\t\t\t\troles: { select: { id: true, title: true } },\n\t\t\t\t\tareas: { select: { id: true, name: true } },\n\t\t\t\t\tisDefault: true,\n\t\t\t\t\tmon: true,\n\t\t\t\t\ttue: true,\n\t\t\t\t\twed: true,\n\t\t\t\t\tthu: true,\n\t\t\t\t\tfri: true,\n\t\t\t\t\tsat: true,\n\t\t\t\t\tsun: true,\n\t\t\t\t\tfrom: true,\n\t\t\t\t\tto: true,\n\t\t\t\t\tvalue: true,\n\t\t\t\t\tcurrency: true,\n\t\t\t\t},\n\t\t\t\twhere: { roles: { some: input.filterByRoleId ? { id: input.filterByRoleId } : undefined } },\n\t\t\t\torderBy: [{ validFrom: 'asc' }, { validTo: 'asc' }],\n\t\t\t\tcursor,\n\t\t\t});\n\n\t\t\tlet nextCursor: typeof cursor | null = null;\n\t\t\tif (items.length > limit) {\n\t\t\t\tconst nextItem = items.pop();\n\t\t\t\tnextCursor = nextItem?.id;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\tnextCursor,\n\t\t\t};\n\t\t}),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(z.object({ id: z.string(), ...priceSchema }))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, roles, areas, from, to, ...rest } = input;\n\t\t\tconst rolesToAdd = roles.map((item) => ({ id: parseInt(item) }));\n\t\t\tconst areasToAdd = areas.map((item) => ({ id: parseInt(item) }));\n\n\t\t\treturn ctx.prisma.price.update({\n\t\t\t\twhere: { id },\n\t\t\t\tdata: {\n\t\t\t\t\t...rest,\n\t\t\t\t\tfrom: parseInt(from.replace(':', '')),\n\t\t\t\t\tto: parseInt(to.replace(':', '')),\n\t\t\t\t\troles: { set: rolesToAdd },\n\t\t\t\t\tareas: { set: areasToAdd },\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.price.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n});\n","import { z } from 'zod';\n\nexport const priceSchema = {\n  validFrom: z.date().optional(),\n  validTo: z.date().optional(),\n  isDefault: z.boolean().optional(),\n  mon: z.boolean().optional(),\n  tue: z.boolean().optional(),\n  wed: z.boolean().optional(),\n  thu: z.boolean().optional(),\n  fri: z.boolean().optional(),\n  sat: z.boolean().optional(),\n  sun: z.boolean().optional(),\n  from: z.string(),\n  to: z.string(),\n  value: z.number(),\n  taxes: z.number(),\n  currency: z.string(),\n  roles: z.string().array(),\n  areas: z.string().array(),\n};\n","import { z } from 'zod';\n\nimport { reservationRuleSchema } from 'schemes/reservationRule';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'reservationRule';\nexport const reservationRuleRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(z.object(reservationRuleSchema))\n\t\t.mutation(({ ctx, input }) =>\n\t\t\tctx.prisma.reservationRule.create({\n\t\t\t\tdata: {\n\t\t\t\t\t...input,\n\t\t\t\t\tvalidFor: { connect: input.validFor?.map((i) => ({ id: parseInt(i) })) },\n\t\t\t\t\taffectedAreas: { connect: input.affectedAreas?.map((i) => ({ id: parseInt(i) })) },\n\t\t\t\t\taffectedCourts: { connect: input.affectedCourts?.map((i) => ({ id: i })) },\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\n\tlist: roleCheckProcedure(routerName, 'list').query(({ ctx }) =>\n\t\tctx.prisma.reservationRule.findMany({\n\t\t\tselect: {\n\t\t\t\tid: true,\n\t\t\t\tname: true,\n\t\t\t\tcheckOn: true,\n\t\t\t\tvalidFor: { select: { title: true } },\n\t\t\t\taffectedAreas: { select: { name: true } },\n\t\t\t\taffectedCourts: { select: { name: true } },\n\t\t\t},\n\t\t})\n\t),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(({ ctx, input }) =>\n\t\t\tctx.prisma.reservationRule.findUnique({\n\t\t\t\twhere: { id: input },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\terrorDescription: true,\n\t\t\t\t\tcheckOn: true,\n\t\t\t\t\truleCheckPluginName: true,\n\t\t\t\t\tvalue: true,\n\t\t\t\t\tvalidFor: { select: { id: true, title: true } },\n\t\t\t\t\taffectedAreas: { select: { id: true, name: true } },\n\t\t\t\t\taffectedCourts: { select: { id: true, name: true } },\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(z.object({ id: z.string(), ...reservationRuleSchema }))\n\t\t.mutation(({ ctx, input }) => {\n\t\t\tconst { id, ...data } = input;\n\t\t\treturn ctx.prisma.reservationRule.update({\n\t\t\t\twhere: { id },\n\t\t\t\tdata: {\n\t\t\t\t\t...data,\n\t\t\t\t\tvalidFor: { set: data.validFor?.map((i) => ({ id: parseInt(i) })) },\n\t\t\t\t\taffectedAreas: { set: data.affectedAreas?.map((i) => ({ id: parseInt(i) })) },\n\t\t\t\t\taffectedCourts: { set: data.affectedCourts?.map((i) => ({ id: i })) },\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.mutation(({ ctx, input }) => ctx.prisma.reservationRule.delete({ where: { id: input } })),\n});\n","import { ReservationRuleCheckOn } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nexport const reservationRuleSchema = {\n\tname: z.string(),\n\terrorDescription: z.string().optional(),\n\tvalidFor: z.string().array().optional(),\n\taffectedAreas: z.string().array().optional(),\n\taffectedCourts: z.string().array().optional(),\n\tcheckOn: z.nativeEnum(ReservationRuleCheckOn),\n\truleCheckPluginName: z.string().optional(),\n\tvalue: z.string(),\n};\n","import { z } from 'zod';\n\nimport { seasonSchemaObject } from 'schemes/season';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst routerName = 'season';\nexport const seasonRouter = createTRPCRouter({\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(seasonSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\treturn ctx.prisma.season.upsert({\n\t\t\t\twhere: { id: id ?? 0 },\n\t\t\t\tcreate: data,\n\t\t\t\tupdate: data,\n\t\t\t});\n\t\t}),\n\n\tlist: publicProcedure.query(async ({ ctx }) => {\n\t\treturn ctx.prisma.season.findMany({\n\t\t\torderBy: [{ starting: 'desc' }],\n\t\t\tinclude: { _count: true },\n\t\t});\n\t}),\n\n\tget: publicProcedure.input(z.number()).query(async ({ input, ctx }) =>\n\t\tctx.prisma.season.findUnique({\n\t\t\twhere: { id: input },\n\t\t\tinclude: { _count: true },\n\t\t})\n\t),\n\n\tgetCurrentSeason: publicProcedure.query(async ({ ctx }) =>\n\t\tctx.prisma.season.findFirst({\n\t\t\twhere: { current: true },\n\t\t})\n\t),\n\n\tsetCurrentSeason: roleCheckProcedure(routerName, 'setCurrentSeason')\n\t\t.input(z.number())\n\t\t.mutation(async ({ input, ctx }) =>\n\t\t\tctx.prisma.$transaction([\n\t\t\t\tctx.prisma.season.update({\n\t\t\t\t\twhere: { id: input },\n\t\t\t\t\tdata: { current: true },\n\t\t\t\t}),\n\t\t\t\tctx.prisma.season.updateMany({\n\t\t\t\t\twhere: { id: { not: input } },\n\t\t\t\t\tdata: { current: false },\n\t\t\t\t}),\n\t\t\t])\n\t\t),\n\n\tlistActiveAndFuture: publicProcedure\n\t\t.input(z.object({ teamFilter: z.number().optional(), invertTeamFilter: z.boolean().optional() }))\n\t\t.query(async ({ input, ctx }) =>\n\t\t\tctx.prisma.season.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tending: { gte: new Date() },\n\t\t\t\t\tteams: input.teamFilter\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tnone: input.invertTeamFilter ? { teamId: input.teamFilter } : undefined,\n\t\t\t\t\t\t\t\tsome: !input.invertTeamFilter ? { teamId: input.teamFilter } : undefined,\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: undefined,\n\t\t\t\t},\n\t\t\t})\n\t\t),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.number())\n\t\t.mutation(({ input, ctx }) => ctx.prisma.season.delete({ where: { id: input } })),\n});\n","import { z } from 'zod';\n\nexport const seasonSchema = {\n  id: z.number().optional(),\n  name: z.string(),\n  shortName: z.string(),\n  starting: z.date(),\n  ending: z.date(),\n};\n\nexport const seasonSchemaObject = z.object(seasonSchema);\nexport type SeasonSchemaType = z.infer<typeof seasonSchemaObject>;\n","import { z } from 'zod';\n\nimport { teamSchemaObject } from 'schemes/team';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst routerName = 'team';\nexport const teamRouter = createTRPCRouter({\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(teamSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, ...data } = input;\n\n\t\t\tif (id) {\n\t\t\t\treturn ctx.prisma.team.update({\n\t\t\t\t\twhere: { id },\n\t\t\t\t\tdata,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn ctx.prisma.team.create({\n\t\t\t\tdata,\n\t\t\t});\n\t\t}),\n\n\tlist: publicProcedure.query(async ({ ctx }) =>\n\t\tctx.prisma.team.findMany({\n\t\t\torderBy: [{ orderNumber: 'asc' }],\n\t\t})\n\t),\n\n\tget: publicProcedure.input(z.number().optional()).query(async ({ input, ctx }) =>\n\t\tinput\n\t\t\t? ctx.prisma.team.findUnique({\n\t\t\t\t\twhere: { id: input },\n\t\t\t\t\tinclude: { _count: true },\n\t\t\t  })\n\t\t\t: {}\n\t),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.number())\n\t\t.mutation(({ input, ctx }) => ctx.prisma.team.delete({ where: { id: input } })),\n});\n","import { TeamCategory } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nexport const teamSchema = {\n\tid: z.number().optional(),\n\tname: z.string(),\n\tshortName: z.string(),\n\tcategory: z.nativeEnum(TeamCategory),\n\torderNumber: z.number(),\n};\n\nexport const teamSchemaObject = z.object(teamSchema);\nexport type TeamSchemaType = z.infer<typeof teamSchemaObject>;\n","import { TeamCategory } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nimport { teamSeasonSchemaObject } from 'schemes/teamSeason';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst routerName = 'teamSeason';\nexport const teamSeasonRouter = createTRPCRouter({\n\tget: publicProcedure.input(z.object({ seasonId: z.number(), teamId: z.number() })).query(async ({ ctx, input }) =>\n\t\tctx.prisma.teamSeason.findUnique({\n\t\t\twhere: { teamId_seasonId: { teamId: input.teamId, seasonId: input.seasonId } },\n\t\t})\n\t),\n\n\tupsert: roleCheckProcedure(routerName, 'upsert')\n\t\t.input(teamSeasonSchemaObject)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { teamId, seasonId, ...data } = input;\n\n\t\t\treturn ctx.prisma.teamSeason.upsert({\n\t\t\t\twhere: { teamId_seasonId: { teamId, seasonId } },\n\t\t\t\tcreate: { teamId, seasonId, ...data },\n\t\t\t\tupdate: data,\n\t\t\t});\n\t\t}),\n\n\tlistBySeasonId: publicProcedure.input(z.number()).query(async ({ ctx, input }) => {\n\t\treturn ctx.prisma.teamSeason.findMany({\n\t\t\torderBy: [{ team: { name: 'asc' } }],\n\t\t\tinclude: { team: { select: { name: true } } },\n\t\t\twhere: { seasonId: input },\n\t\t});\n\t}),\n\n\tlistByTeamId: publicProcedure.input(z.number()).query(async ({ ctx, input }) => {\n\t\treturn ctx.prisma.teamSeason.findMany({\n\t\t\torderBy: [{ season: { starting: 'desc' } }],\n\t\t\tinclude: { season: { select: { name: true } } },\n\t\t\twhere: { teamId: input },\n\t\t});\n\t}),\n\n\tlistByCategory: publicProcedure\n\t\t.input(z.object({ category: z.nativeEnum(TeamCategory), season: z.number().optional() }))\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tlet seasonId = input.season;\n\t\t\tif (!seasonId) {\n\t\t\t\tconst currentSeason = await ctx.prisma.season.findFirst({\n\t\t\t\t\twhere: { current: true },\n\t\t\t\t});\n\t\t\t\tif (!currentSeason) return [];\n\t\t\t\tseasonId = currentSeason.id;\n\t\t\t}\n\n\t\t\treturn ctx.prisma.teamSeason.findMany({\n\t\t\t\tselect: { leagueName: true, nuGroupId: true, nuTeamId: true, team: { select: { name: true } } },\n\t\t\t\torderBy: [{ team: { orderNumber: 'asc' } }],\n\t\t\t\twhere: { team: { category: input.category }, seasonId },\n\t\t\t});\n\t\t}),\n\n\tlistLeagueNames: publicProcedure.query(async ({ ctx }) => {\n\t\tconst result: Array<string> = [];\n\t\tconst teamSeasons = await ctx.prisma.teamSeason.findMany({\n\t\t\tselect: { leagueName: true },\n\t\t\tdistinct: ['leagueName'],\n\t\t});\n\n\t\tfor (const { leagueName } of teamSeasons) {\n\t\t\tif (leagueName && leagueName !== null) result.push(leagueName);\n\t\t}\n\n\t\treturn result;\n\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.object({ teamId: z.number(), seasonId: z.number() }))\n\t\t.mutation(({ input, ctx }) => ctx.prisma.teamSeason.delete({ where: { teamId_seasonId: input } })),\n});\n","import { z } from 'zod';\n\nexport const teamSeasonSchema = {\n  teamId: z.number(),\n  seasonId: z.number(),\n  teamLeaderId: z.string().nullable().optional(),\n  nuGroupId: z.string(),\n  nuTeamId: z.string(),\n  leagueName: z.string(),\n};\n\nexport const teamSeasonSchemaObject = z.object(teamSeasonSchema);\nexport type TeamSeasonSchemaType = z.infer<typeof teamSeasonSchemaObject>;\n","import { PermissionState } from 'db/databaseTypes';\nimport { TRPCError } from '@trpc/server';\nimport { z } from 'zod';\n\nimport { userSchemaObject } from 'schemes/user';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'user';\nexport const userRouter = createTRPCRouter({\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string().optional())\n\t\t.query(async ({ ctx, input }) => {\n\t\t\tif (ctx.permission !== PermissionState.ALL && ctx.permission === PermissionState.OWN && input !== undefined && input !== ctx.session.id)\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tconst userId = input ?? ctx.session.id!;\n\n\t\t\treturn ctx.prisma.user.findUnique({\n\t\t\t\twhere: { id: userId },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\temail: true,\n\t\t\t\t\timage: true,\n\t\t\t\t\taddress: true,\n\t\t\t\t\tcityCode: true,\n\t\t\t\t\tcityName: true,\n\t\t\t\t\tcountryCode: true,\n\t\t\t\t\tphoneNumber: true,\n\t\t\t\t\tpublicName: true,\n\t\t\t\t\troles: { select: { id: true, title: true, description: true } },\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(userSchemaObject)\n\t\t.mutation(async ({ ctx, input }) => {\n\t\t\tif (ctx.permission !== PermissionState.ALL && ctx.permission === PermissionState.OWN && input.id !== ctx.session.id)\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tconst { id, roles, ...data } = input;\n\t\t\tconst setRoles = roles?.map((i) => ({ id: parseInt(i) }));\n\n\t\t\treturn ctx.prisma.user.update({\n\t\t\t\twhere: { id: id },\n\t\t\t\tdata: {\n\t\t\t\t\t...data,\n\t\t\t\t\troles: setRoles ? { set: setRoles } : undefined,\n\t\t\t\t\tneedsSetup: false,\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tupdateRoles: roleCheckProcedure(routerName, 'updateRoles')\n\t\t.input(z.object({ id: z.string(), roles: z.string().array() }))\n\t\t.mutation(async ({ ctx, input }) => {\n\t\t\tif (ctx.permission !== PermissionState.ALL && ctx.permission === PermissionState.OWN && input.id !== ctx.session.id)\n\t\t\t\tthrow new TRPCError({ code: 'UNAUTHORIZED' });\n\n\t\t\tconst { id, roles } = input;\n\t\t\tconst setRoles = roles.map((i) => ({ id: parseInt(i) }));\n\n\t\t\treturn ctx.prisma.user.update({\n\t\t\t\twhere: { id: id },\n\t\t\t\tdata: {\n\t\t\t\t\troles: setRoles ? { set: setRoles } : undefined,\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string())\n\t\t.query(async ({ ctx, input }) => ctx.prisma.user.delete({ where: { id: input } })),\n\n\tgetAutosuggestOptions: roleCheckProcedure(routerName, 'getAutosuggestOptions')\n\t\t.input(z.string())\n\t\t.query(async ({ ctx, input }) => {\n\t\t\treturn ctx.prisma.user.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tOR: [{ name: { contains: input } }, { email: { contains: input } }],\n\t\t\t\t\tid: { not: ctx.session!.id },\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\timage: true,\n\t\t\t\t\temail: true,\n\t\t\t\t},\n\t\t\t\torderBy: { name: 'asc' },\n\t\t\t\ttake: 5,\n\t\t\t});\n\t\t}),\n});\n","import { z } from 'zod';\n\nexport const userSchema = {\n  id: z.string().optional(),\n  name: z.string().min(6),\n  email: z.string().optional().nullable(),\n  password: z.string().optional(),\n  image: z.string().optional().nullable(),\n  phoneNumber: z.string().min(5),\n  address: z.string().min(2),\n  cityCode: z.string().min(5),\n  cityName: z.string().min(2),\n  countryCode: z.string().optional().nullable(),\n  roles: z.string().array().optional(),\n  publicName: z.boolean().optional(),\n};\n\nexport const userSchemaObject = z.object(userSchema);\n","import { PermissionState } from 'db/databaseTypes';\nimport { z } from 'zod';\n\nimport { userRoleSchema, userRoleSchemaObject } from 'schemes/userRole';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'userRole';\nexport const userRoleRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(userRoleSchemaObject)\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.userRole.create({\n\t\t\t\tdata: input,\n\t\t\t})\n\t\t),\n\n\tlist: roleCheckProcedure(routerName, 'list').query(({ ctx }) => {\n\t\tlet where;\n\t\tif (ctx.permission !== PermissionState.ALL) where = { users: { some: { id: ctx.session.id } } };\n\n\t\treturn ctx.prisma.userRole.findMany({\n\t\t\tselect: { id: true, title: true, description: true, _count: true },\n\t\t\twhere,\n\t\t});\n\t}),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.number())\n\t\t.query(({ ctx, input }) => {\n\t\t\tlet additionalWhere;\n\t\t\tif (ctx.permission !== PermissionState.ALL) additionalWhere = { users: { some: { id: ctx.session.id } } };\n\n\t\t\treturn ctx.prisma.userRole.findFirstOrThrow({\n\t\t\t\twhere: { id: input, ...additionalWhere },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t\tdescription: true,\n\t\t\t\t\tisDefault: true,\n\t\t\t\t\t_count: true,\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tgetUsersByRole: roleCheckProcedure(routerName, 'getUsersByRole')\n\t\t.input(z.number())\n\t\t.query(({ ctx, input }) => {\n\t\t\treturn ctx.prisma.user.findMany({\n\t\t\t\twhere: { roles: { some: { id: input } } },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\temail: true,\n\t\t\t\t\timage: true,\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tgetAddableUsers: roleCheckProcedure(routerName, 'getAddableUsers')\n\t\t.input(z.number())\n\t\t.query(({ ctx, input }) => {\n\t\t\treturn ctx.prisma.user.findMany({\n\t\t\t\twhere: { roles: { none: { id: input } } },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\temail: true,\n\t\t\t\t\timage: true,\n\t\t\t\t},\n\t\t\t});\n\t\t}),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(z.object({ id: z.number(), ...userRoleSchema }))\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.userRole.update({\n\t\t\t\twhere: { id: input.id },\n\t\t\t\tdata: { title: input.title, description: input.description, isDefault: input.isDefault },\n\t\t\t})\n\t\t),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.number())\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.userRole.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t})\n\t\t),\n\n\tremoveUserFromRole: roleCheckProcedure(routerName, 'removeUserFromRole')\n\t\t.input(z.object({ userId: z.string(), roleId: z.number() }))\n\t\t.mutation(({ input, ctx }) =>\n\t\t\tctx.prisma.userRole.update({\n\t\t\t\twhere: { id: input.roleId },\n\t\t\t\tdata: { users: { disconnect: { id: input.userId } } },\n\t\t\t})\n\t\t),\n\n\taddUsersToRole: roleCheckProcedure(routerName, 'addUsersToRole')\n\t\t.input(z.object({ userIds: z.string().array(), roleId: z.number() }))\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst usersToAdd = input.userIds.map((item) => ({ id: item }));\n\t\t\treturn ctx.prisma.userRole.update({\n\t\t\t\twhere: { id: input.roleId },\n\t\t\t\tdata: { users: { connect: usersToAdd } },\n\t\t\t});\n\t\t}),\n});\n","import { z } from 'zod';\n\nexport const userRoleSchema = {\n  title: z.string(),\n  description: z.string().optional().nullable(),\n  priority: z.number(),\n  isDefault: z.boolean(),\n};\n\nexport const userRoleSchemaObject = z.object(userRoleSchema);\n","import { generateMembershipToken } from 'authentication/jwt';\nimport { createTRPCRouter, roleCheckProcedure } from '..';\n\nconst routerName = 'membership';\nexport const membershipRouter = createTRPCRouter({\n\tgetMembershipCardData: roleCheckProcedure(routerName, 'get').query(({ ctx }) => {\n\t\ttry {\n\t\t\tconst membershipToken = generateMembershipToken({ id: ctx.session.id, name: ctx.session.name, email: ctx.session.email });\n\n\t\t\treturn { id: ctx.session.id, name: ctx.session.name, email: ctx.session.email, membershipToken };\n\t\t} catch (error) {\n\t\t\tconsole.error('Error generating membership token:', error);\n\t\t}\n\t}),\n});\n","import { PermissionState } from 'db/databaseTypes';\nimport { z } from 'zod';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\n\nconst PushNotificationChannelSchema = z.object({\n\tid: z.string().cuid().optional(),\n\ttitle: z.string(),\n\tisPublic: z.boolean().default(true),\n\tgrantedUserRoles: z.number().array(),\n});\n\nconst routerName = 'pushNotificationChannel';\nexport const pushNotificationChannelRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(PushNotificationChannelSchema)\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst { title, isPublic, grantedUserRoles } = input;\n\t\t\tconst grantedRoles = grantedUserRoles.map((id) => ({ id }));\n\n\t\t\treturn await ctx.prisma.pushNotificationChannel.create({\n\t\t\t\tdata: { title, isPublic, grantedUserRoles: { connect: grantedRoles } },\n\t\t\t});\n\t\t}),\n\n\tlist: roleCheckProcedure(routerName, 'list').query(async ({ ctx }) => {\n\t\tif (ctx.permission === PermissionState.ALL) return await ctx.prisma.pushNotificationChannel.findMany();\n\t\tconst grantedRoles = ctx.session.roles?.map((id) => ({ id }));\n\t\tconst items = await ctx.prisma.pushNotificationChannel.findMany({\n\t\t\twhere: { OR: [{ isPublic: true }, { grantedUserRoles: { some: { OR: grantedRoles } } }] },\n\t\t});\n\n\t\treturn items;\n\t}),\n\tlistPublic: publicProcedure.query(async ({ ctx }) => await ctx.prisma.pushNotificationChannel.findMany({ where: { isPublic: true } })),\n\n\tget: roleCheckProcedure(routerName, 'get')\n\t\t.input(z.string())\n\t\t.query(({ ctx, input }) => {\n\t\t\treturn ctx.prisma.pushNotificationChannel.findUnique({ where: { id: input }, include: { grantedUserRoles: { select: { id: true } } } });\n\t\t}),\n\n\tupdate: roleCheckProcedure(routerName, 'update')\n\t\t.input(PushNotificationChannelSchema)\n\t\t.mutation(({ input, ctx }) => {\n\t\t\tconst { id, grantedUserRoles, ...data } = input;\n\t\t\tconst grantedRoles = grantedUserRoles.map((id) => ({ id }));\n\n\t\t\treturn ctx.prisma.pushNotificationChannel.update({\n\t\t\t\twhere: { id },\n\t\t\t\tdata: { ...data, grantedUserRoles: { connect: grantedRoles } },\n\t\t\t});\n\t\t}),\n\n\tdelete: roleCheckProcedure(routerName, 'delete')\n\t\t.input(z.string().cuid())\n\t\t.mutation(({ input, ctx }) => {\n\t\t\treturn ctx.prisma.pushNotificationChannel.delete({\n\t\t\t\twhere: { id: input },\n\t\t\t});\n\t\t}),\n});\n","import { PermissionState } from 'db/databaseTypes';\nimport { z } from 'zod';\nimport { createTRPCRouter, publicProcedure, roleCheckProcedure } from '..';\nimport { Expo, ExpoPushMessage } from 'expo-server-sdk';\nimport { env } from 'utils/env';\n\nconst expo = new Expo({\n\taccessToken: env.EXPO_PUSHNOTIFICATIONS_PAT,\n});\n\nconst PushNotificationSchema = z.object({\n\ttitle: z.string(),\n\tmessage: z.string(),\n\tchannelId: z.string().cuid(),\n});\n\nconst generateMessages = (title: string, body: string, tokens: string[]) => {\n\tconst messages: ExpoPushMessage[] = [];\n\tconst message: Partial<ExpoPushMessage> = {\n\t\tsound: 'default',\n\t\ttitle,\n\t\tbody,\n\t\t// richContent: {\n\t\t// \timage: 'https://example.com/statics/some-image-here-if-you-want.jpg',\n\t\t// },\n\t};\n\n\tfor (const token of tokens) messages.push({ ...message, to: token });\n\n\treturn messages;\n};\n\nconst sendNotifications = async (messages: ExpoPushMessage[]) => {\n\tconst repushTokens: string[] = [];\n\tconst deleteTokens: string[] = [];\n\n\tconst tickets = [];\n\tconst chunks = await expo.chunkPushNotifications(messages);\n\n\tfor (const chunk of chunks) {\n\t\ttry {\n\t\t\tconst ticketChunk = await expo.sendPushNotificationsAsync(chunk);\n\t\t\ttickets.push(...ticketChunk);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\tfor (const ticket of tickets) {\n\t\tif (ticket.status === 'ok') return;\n\t\tif (ticket.details?.error === 'DeviceNotRegistered' && ticket.details.expoPushToken) deleteTokens.push(ticket.details.expoPushToken);\n\t\telse if ((ticket.details?.error === 'ExpoError' || ticket.details?.error === 'MessageRateExceeded') && ticket.details.expoPushToken)\n\t\t\trepushTokens.push(ticket.details.expoPushToken);\n\t}\n\n\treturn { repushTokens, deleteTokens };\n};\n\nconst routerName = 'pushNotification';\nexport const pushNotificationsRouter = createTRPCRouter({\n\tcreate: roleCheckProcedure(routerName, 'create')\n\t\t.input(PushNotificationSchema)\n\t\t.mutation(async ({ input, ctx }) => {\n\t\t\tconst notification = await ctx.prisma.pushNotification.create({ data: input });\n\n\t\t\tconst channelSubscribers = await ctx.prisma.expoPushTokens.findMany({ where: { channels: { some: { id: input.channelId } } } });\n\t\t\tconst messages = generateMessages(\n\t\t\t\tnotification.title,\n\t\t\t\tnotification.message,\n\t\t\t\tchannelSubscribers.map((s) => s.id)\n\t\t\t);\n\t\t\tconst messageResults = await sendNotifications(messages);\n\t\t\tif (messageResults && messageResults.deleteTokens.length > 0)\n\t\t\t\tawait ctx.prisma.expoPushTokens.deleteMany({ where: { id: { in: messageResults.deleteTokens } } });\n\n\t\t\tif (messageResults && messageResults.repushTokens.length > 0)\n\t\t\t\tawait sendNotifications(generateMessages(notification.title, notification.message, messageResults.repushTokens));\n\n\t\t\treturn notification;\n\t\t}),\n\n\tlist: roleCheckProcedure(routerName, 'list')\n\t\t.input(z.string())\n\t\t.query(async ({ input, ctx }) => {\n\t\t\tif (ctx.permission === PermissionState.ALL)\n\t\t\t\treturn await ctx.prisma.pushNotification.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tchannel: {\n\t\t\t\t\t\t\tsubscribers: {\n\t\t\t\t\t\t\t\tsome: { id: input },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\tconst grantedRoles = ctx.session.roles?.map((id) => ({ id }));\n\t\t\tconst items = await ctx.prisma.pushNotification.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tchannel: {\n\t\t\t\t\t\tsubscribers: {\n\t\t\t\t\t\t\tsome: { id: input },\n\t\t\t\t\t\t},\n\t\t\t\t\t\tOR: [{ isPublic: true }, { grantedUserRoles: { some: { OR: grantedRoles } } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn items;\n\t\t}),\n\n\tlistByChannelId: roleCheckProcedure(routerName, 'list')\n\t\t.input(z.string())\n\t\t.query(async ({ input, ctx }) => {\n\t\t\tif (ctx.permission === PermissionState.ALL) return await ctx.prisma.pushNotification.findMany({ where: { channel: { id: input } } });\n\n\t\t\tconst grantedRoles = ctx.session.roles?.map((id) => ({ id }));\n\t\t\tconst items = await ctx.prisma.pushNotification.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tchannel: {\n\t\t\t\t\t\tid: input,\n\t\t\t\t\t\tOR: [{ isPublic: true }, { grantedUserRoles: { some: { OR: grantedRoles } } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn items;\n\t\t}),\n\n\tlistMy: publicProcedure\n\t\t.input(z.string())\n\t\t.query(async ({ input, ctx }) => await ctx.prisma.pushNotification.findMany({ where: { channel: { subscribers: { some: { id: input } } } } })),\n});\n","import { z } from 'zod';\nimport { createTRPCRouter, publicProcedure } from '..';\nimport { Expo } from 'expo-server-sdk';\nimport { TRPCError } from '@trpc/server';\n\nconst SubscribeChannelRequestSchema = z.object({ expoPushToken: z.string(), channelId: z.string() });\n\nexport const pushTokenRouter = createTRPCRouter({\n\tcreate: publicProcedure.input(z.string()).mutation(async ({ input, ctx }) => {\n\t\tif (!Expo.isExpoPushToken(input)) throw new TRPCError({ code: 'BAD_REQUEST', message: `Push token ${input} is not a valid Expo push token` });\n\n\t\tconst grantedRoles = ctx.session?.roles?.map((id) => ({ id }));\n\t\tconst availableChannels = await ctx.prisma.pushNotificationChannel.findMany({\n\t\t\tselect: { id: true },\n\t\t\twhere: { OR: [{ isPublic: true }, { grantedUserRoles: { some: { OR: grantedRoles } } }] },\n\t\t});\n\n\t\treturn await ctx.prisma.expoPushTokens.create({\n\t\t\tdata: { id: input, userId: ctx.session?.id, channels: { connect: availableChannels } },\n\t\t});\n\t}),\n\tisRegistered: publicProcedure.input(z.string()).mutation(async ({ input, ctx }) => {\n\t\tif (!Expo.isExpoPushToken(input)) throw new TRPCError({ code: 'BAD_REQUEST', message: `Push token ${input} is not a valid Expo push token` });\n\t\tconst isRegistered = await ctx.prisma.expoPushTokens.count({ where: { id: input } });\n\t\treturn isRegistered > 0;\n\t}),\n\tmyChannels: publicProcedure.input(z.string()).query(async ({ input, ctx }) => {\n\t\tif (!Expo.isExpoPushToken(input)) throw new TRPCError({ code: 'BAD_REQUEST', message: `Push token ${input} is not a valid Expo push token` });\n\n\t\treturn await ctx.prisma.expoPushTokens.findUnique({\n\t\t\twhere: { id: input },\n\t\t\tinclude: { channels: { select: { id: true } } },\n\t\t});\n\t}),\n\n\tsubscribeChannel: publicProcedure.input(SubscribeChannelRequestSchema).mutation(async ({ input, ctx }) => {\n\t\tif (!Expo.isExpoPushToken(input.expoPushToken))\n\t\t\tthrow new TRPCError({ code: 'BAD_REQUEST', message: `Push token ${input} is not a valid Expo push token` });\n\n\t\treturn await ctx.prisma.expoPushTokens.update({\n\t\t\twhere: { id: input.expoPushToken },\n\t\t\tdata: { channels: { connect: { id: input.channelId } } },\n\t\t});\n\t}),\n\n\tunsubscribeChannel: publicProcedure.input(SubscribeChannelRequestSchema).mutation(async ({ input, ctx }) => {\n\t\tif (!Expo.isExpoPushToken(input.expoPushToken))\n\t\t\tthrow new TRPCError({ code: 'BAD_REQUEST', message: `Push token ${input} is not a valid Expo push token` });\n\n\t\treturn await ctx.prisma.expoPushTokens.update({\n\t\t\twhere: { id: input.expoPushToken },\n\t\t\tdata: { channels: { disconnect: { id: input.channelId } } },\n\t\t});\n\t}),\n});\n","import { createTRPCRouter } from 'router';\nimport { areaRouter } from './area';\nimport { benefitRouter } from './benefit';\nimport { controlInterfaceRouter } from './controlInterfaces';\nimport { courtRouter } from './court';\nimport { dashboardRouter } from './dashboard';\nimport { eventCategoriesRouter } from './eventCategories';\nimport { eventsRouter } from './events';\nimport { hallencardRouter } from './hallencard';\nimport { notificationRouter } from './notification';\nimport { organisationMembersRouter } from './organisationMembers';\nimport { organisationsRouter } from './organisations';\nimport { permissionRouter } from './permission';\nimport { priceRouter } from './price';\nimport { reservationRouter } from './reservation';\nimport { reservationRuleRouter } from './reservationRule';\nimport { seasonRouter } from './season';\nimport { teamRouter } from './team';\nimport { teamSeasonRouter } from './teamSeason';\nimport { transactionRouter } from './transaction';\nimport { userRouter } from './user';\nimport { userRoleRouter } from './userRole';\nimport { membershipRouter } from './membership';\nimport { pushNotificationChannelRouter } from './pushNotificationChannels';\nimport { pushNotificationsRouter } from './pushNotifications';\nimport { pushTokenRouter } from './pushTokens';\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n\tarea: areaRouter,\n\tbenefit: benefitRouter,\n\tcontrolInterface: controlInterfaceRouter,\n\tcourt: courtRouter,\n\tdashboard: dashboardRouter,\n\tevents: eventsRouter,\n\teventCategories: eventCategoriesRouter,\n\thallencard: hallencardRouter,\n\tmembership: membershipRouter,\n\tnotification: notificationRouter,\n\torganisations: organisationsRouter,\n\torganisationMembers: organisationMembersRouter,\n\tpermission: permissionRouter,\n\tprice: priceRouter,\n\tpushNotificationChannel: pushNotificationChannelRouter,\n\tpushNotifications: pushNotificationsRouter,\n\tpushTokens: pushTokenRouter,\n\treservation: reservationRouter,\n\treservationRule: reservationRuleRouter,\n\tseason: seasonRouter,\n\tteam: teamRouter,\n\tteamSeason: teamSeasonRouter,\n\ttransaction: transactionRouter,\n\tuser: userRouter,\n\tuserRole: userRoleRouter,\n});\n"],"mappings":"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","names":["format","ApplicationDialogPermission","ReservationType","ReservationRuleCheckOn","PermissionState","TransactionReason","TeamCategory","NotificationSeverity","getPublicSigningKey","z","z","TRPCError","z","z","routerName","z","TRPCError","z","z","TRPCError","DateTime","z","z","TRPCError","z","z","routerName","z","TRPCError","DateTime","routerName","z","TRPCError","routerName","z","id","z","z","selectList","routerName","z","routerName","z","z","routerName","z","z","z","routerName","z","z","z","HallencardStatus","routerName","z","TRPCError","z","z","routerName","z","TRPCError","z","z","routerName","z","z","z","routerName","z","TRPCError","z","z","PermissionState","routerName","TRPCError","z","z","routerName","z","z","z","routerName","z","z","z","routerName","z","z","z","routerName","z","z","z","routerName","z","TRPCError","z","z","routerName","z","TRPCError","z","z","routerName","z","routerName","z","z","routerName","id","z","z","routerName","z","Expo","TRPCError","z"]}