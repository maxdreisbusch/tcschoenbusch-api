// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../src/db/databaseTypes.ts"
  enumType = "type"
  language = "typescript"
}

datasource db {
  provider = "mysql"
  //provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id      String  @id @default(cuid())
  name    String?
  email   String? @unique
  image   String?
  auth0Id String  @unique

  address     String?
  cityCode    String?
  cityName    String?
  countryCode String?
  needsSetup  Boolean @default(true)
  publicName  Boolean @default(true)
  phoneNumber String?

  abonnements          Abonnement[]
  ownedReservations    Reservation[]
  fellowedReservations Reservation[] @relation("reservationFellows")
  transactions         Transaction[]
  teams                TeamMember[]
  leadTeams            TeamSeason[]

  roles UserRole[]

  likedEvents Event[] @relation("userLikedEvents")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Area {
  id           Int       @id @default(autoincrement())
  name         String
  shortName    String
  activeFrom   DateTime?
  activeTo     DateTime?
  bookableFrom DateTime?
  order        Int?

  courts           Court[]
  reservationRules ReservationRule[]
  prices           Price[]

  @@map("areas")
}

model Court {
  id          String  @id @default(cuid())
  name        String
  shortName   String?
  description String?
  order       Int?

  active     Boolean   @default(true)
  activeFrom DateTime?
  activeTo   DateTime?

  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId Int

  abonnements      Abonnement[]
  reservations     Reservation[]
  reservationRules ReservationRule[]

  controlInterfaces ControlInterface[]

  @@map("courts")
}

enum ReservationType {
  TOURNAMENT
  MAINTENANCE
  TEAM_PRACTICE
  TEAM_COMPETITION
}

enum ReservationStatus {
  REQUESTED
  BILLED
  APPROVED
}

model Reservation {
  id    String   @id @default(cuid())
  title String
  start DateTime
  end   DateTime

  court   Court?  @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId String?

  status              ReservationStatus
  type                ReservationType?
  paypalTransactionId String?
  price               Float?
  taxRate             Float?

  light    Boolean
  radiator Boolean

  abo          Abonnement? @relation(fields: [abonnementId], references: [id], onDelete: Cascade)
  abonnementId String?

  owner        User?         @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId      String?
  fellows      User[]        @relation("reservationFellows")
  transactions Transaction[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("reservations")
}

enum ReservationRuleCheckOn {
  CREATE
  UPDATE
  DELETE
}

model ReservationRule {
  id               String  @id @default(cuid())
  name             String
  errorDescription String?

  validFor       UserRole[]
  affectedAreas  Area[]
  affectedCourts Court[]

  checkOn ReservationRuleCheckOn

  ruleCheckPluginName String?
  value               String
}

enum AbonnementStatus {
  REQUESTED
  APPROVED
  BILLED
  PAID
  DELETED
}

model Abonnement {
  id       String           @id @default(cuid())
  name     String
  weekday  Int
  start    DateTime
  duration Float
  status   AbonnementStatus

  court   Court?  @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId String?

  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId String?

  transactions Transaction[]
  reservations Reservation[]

  @@map("abonnements")
}

model UserRole {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  isDefault   Boolean @default(false)

  permissions      Permission[]
  users            User[]
  prices           Price[]
  reservationRules ReservationRule[]

  priority Int @default(0)

  @@map("userRoles")
}

enum PermissionState {
  NONE
  OWN
  ALL
}

model Permission {
  router     String
  action     String
  userRole   UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  userRoleId Int

  allowed PermissionState @default(NONE)

  @@id([router, action, userRoleId])
  @@map("permissions")
}

model Hallencard {
  code String @id
  pin  String

  value Float

  printed       Boolean
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @unique

  @@map("hallencards")
}

model Price {
  id        String    @id @default(cuid())
  validFrom DateTime?
  validTo   DateTime?
  isDefault Boolean   @default(false)

  mon Boolean @default(false)
  tue Boolean @default(false)
  wed Boolean @default(false)
  thu Boolean @default(false)
  fri Boolean @default(false)
  sat Boolean @default(false)
  sun Boolean @default(false)

  from     Int
  to       Int
  value    Float
  currency String @default("EUR")
  taxes    Float

  roles UserRole[]
  areas Area[]

  @@map("prices")
}

enum TransactionReason {
  HALLENCARD_RECHARGE
  INVOICE
  ONLINE_PAYMENT
  BANK_TRANSFER
  COURT_RESERVATION
  COURT_RESERVATION_STORNO
  REFUND
  DONATION
}

model Transaction {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  value              Float
  currency           String
  reason             TransactionReason
  paymentInformation String?

  hallencard    Hallencard?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId String?
  abonnement    Abonnement?  @relation(fields: [abonnementId], references: [id])
  abonnementId  String?

  createdAt DateTime @default(now())
  deleted   Boolean  @default(false)

  @@map("transactions")
}

//Mannschaften
model Season {
  id        Int      @id @default(autoincrement())
  name      String
  shortName String
  starting  DateTime
  ending    DateTime
  current   Boolean  @default(false)

  teams   TeamSeason[]
  players TeamMember[]

  @@map("seasons")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  shortName   String
  category    TeamCategory
  orderNumber Int

  teamSeasons TeamSeason[]
  members     TeamMember[]

  @@map("teams")
}

enum TeamCategory {
  Men
  Women
  Youth
}

model TeamSeason {
  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId Int

  teamLeader   User?   @relation(fields: [teamLeaderId], references: [id], onDelete: Cascade)
  teamLeaderId String?

  nuGroupId  String
  nuTeamId   String
  leagueName String

  @@id([teamId, seasonId])
  @@map("teamSeasons")
}

model TeamMember {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId Int

  @@id([userId, teamId, seasonId])
  @@map("teamMembers")
}

enum NotificationSeverity {
  ERROR
  WARNING
  INFO
  SUCCESS
}

model Notification {
  id       String               @id @default(cuid())
  title    String
  message  String?
  severity NotificationSeverity

  showFrom DateTime
  showTo   DateTime

  @@map("notifications")
}

model Benefit {
  id          String  @id @default(cuid())
  title       String
  description String? @db.Text
  image       String?
  cover       Boolean @default(false)
  link        String?

  activeFrom DateTime?
  activeTo   DateTime?

  @@map("benefits")
}

model ControlInterface {
  id           String  @id @default(cuid())
  title        String
  description  String
  preBooking   Int
  postBooking  Int
  connectByAnd Boolean @default(false)
  connectByOr  Boolean @default(false)

  affectedCourts Court[]

  @@map("controlInterfaces")
}

model Organisation {
  id    String @id @default(cuid())
  slug  String @unique
  title String

  members OrganisationMember[]

  @@map("organisations")
}

model OrganisationMember {
  id       String  @id @default(cuid())
  fullName String
  function String?
  image    String?
  email    String?
  phone    String?
  orderID  Int?

  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String

  parentMember   OrganisationMember?  @relation("organisationMembers", fields: [parentMemberId], references: [id], onDelete: SetNull)
  parentMemberId String?
  childMembers   OrganisationMember[] @relation("organisationMembers")

  @@map("organisationMembers")
}

model EventCategory {
  id    String @id @default(cuid())
  slug  String @unique
  title String

  events Event[]

  @@map("eventCategories")
}

model Event {
  id          String  @id @default(cuid())
  title       String
  description String?
  image       String?

  start    DateTime
  end      DateTime?
  canceled Boolean   @default(false)
  revised  Boolean   @default(false)

  link     String?
  location String?

  category     EventCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  likedByUsers User[]        @relation("userLikedEvents")

  @@map("events")
}
