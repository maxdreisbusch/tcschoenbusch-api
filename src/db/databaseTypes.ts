// This file was auto-generated by prisma-generator-typescript-interfaces

export enum ReservationType {
  TOURNAMENT = "TOURNAMENT",
  MAINTENANCE = "MAINTENANCE",
  TEAM_PRACTICE = "TEAM_PRACTICE",
  TEAM_COMPETITION = "TEAM_COMPETITION"
}

export enum ReservationStatus {
  REQUESTED = "REQUESTED",
  BILLED = "BILLED",
  APPROVED = "APPROVED"
}

export enum ReservationRuleCheckOn {
  CREATE = "CREATE",
  UPDATE = "UPDATE",
  DELETE = "DELETE"
}

export enum AbonnementStatus {
  REQUESTED = "REQUESTED",
  APPROVED = "APPROVED",
  BILLED = "BILLED",
  PAID = "PAID",
  DELETED = "DELETED"
}

export enum PermissionState {
  NONE = "NONE",
  OWN = "OWN",
  ALL = "ALL"
}

export enum TransactionReason {
  HALLENCARD_RECHARGE = "HALLENCARD_RECHARGE",
  INVOICE = "INVOICE",
  ONLINE_PAYMENT = "ONLINE_PAYMENT",
  BANK_TRANSFER = "BANK_TRANSFER",
  COURT_RESERVATION = "COURT_RESERVATION",
  COURT_RESERVATION_STORNO = "COURT_RESERVATION_STORNO",
  REFUND = "REFUND",
  DONATION = "DONATION"
}

export enum TeamCategory {
  Men = "Men",
  Women = "Women",
  Youth = "Youth"
}

export enum NotificationSeverity {
  ERROR = "ERROR",
  WARNING = "WARNING",
  INFO = "INFO",
  SUCCESS = "SUCCESS"
}

export interface User {
  id: string;
  name: string | null;
  email: string | null;
  image: string | null;
  auth0Id: string;
  address: string | null;
  cityCode: string | null;
  cityName: string | null;
  countryCode: string | null;
  needsSetup: boolean;
  publicName: boolean;
  phoneNumber: string | null;
  abonnements?: Abonnement[];
  ownedReservations?: Reservation[];
  fellowedReservations?: Reservation[];
  transactions?: Transaction[];
  teams?: TeamMember[];
  leadTeams?: TeamSeason[];
  roles?: UserRole[];
  likedEvents?: Event[];
}

export interface VerificationToken {
  identifier: string;
  token: string;
  expires: Date;
}

export interface Area {
  id: number;
  name: string;
  shortName: string;
  activeFrom: Date | null;
  activeTo: Date | null;
  bookableFrom: Date | null;
  order: number | null;
  courts?: Court[];
  reservationRules?: ReservationRule[];
  prices?: Price[];
}

export interface Court {
  id: string;
  name: string;
  shortName: string | null;
  description: string | null;
  order: number | null;
  active: boolean;
  activeFrom: Date | null;
  activeTo: Date | null;
  area?: Area;
  areaId: number;
  abonnements?: Abonnement[];
  reservations?: Reservation[];
  reservationRules?: ReservationRule[];
  controlInterfaces?: ControlInterface[];
}

export interface Reservation {
  id: string;
  title: string;
  start: Date;
  end: Date;
  court?: Court | null;
  courtId: string | null;
  status: ReservationStatus;
  type: ReservationType | null;
  paypalTransactionId: string | null;
  price: number | null;
  taxRate: number | null;
  light: boolean;
  radiator: boolean;
  abo?: Abonnement | null;
  abonnementId: string | null;
  owner?: User | null;
  ownerId: string | null;
  fellows?: User[];
  transactions?: Transaction[];
  createdAt: Date;
  deletedAt: Date | null;
}

export interface ReservationRule {
  id: string;
  name: string;
  errorDescription: string | null;
  validFor?: UserRole[];
  affectedAreas?: Area[];
  affectedCourts?: Court[];
  checkOn: ReservationRuleCheckOn;
  ruleCheckPluginName: string | null;
  value: string;
}

export interface Abonnement {
  id: string;
  name: string;
  weekday: number;
  start: Date;
  duration: number;
  status: AbonnementStatus;
  court?: Court | null;
  courtId: string | null;
  owner?: User | null;
  ownerId: string | null;
  transactions?: Transaction[];
  reservations?: Reservation[];
}

export interface UserRole {
  id: number;
  title: string;
  description: string | null;
  isDefault: boolean;
  permissions?: Permission[];
  users?: User[];
  prices?: Price[];
  reservationRules?: ReservationRule[];
  priority: number;
}

export interface Permission {
  router: string;
  action: string;
  userRole?: UserRole;
  userRoleId: number;
  allowed: PermissionState;
}

export interface Hallencard {
  code: string;
  pin: string;
  value: number;
  printed: boolean;
  transaction?: Transaction | null;
  transactionId: string | null;
}

export interface Price {
  id: string;
  validFrom: Date | null;
  validTo: Date | null;
  isDefault: boolean;
  mon: boolean;
  tue: boolean;
  wed: boolean;
  thu: boolean;
  fri: boolean;
  sat: boolean;
  sun: boolean;
  from: number;
  to: number;
  value: number;
  currency: string;
  taxes: number;
  roles?: UserRole[];
  areas?: Area[];
}

export interface Transaction {
  id: string;
  user?: User | null;
  userId: string | null;
  value: number;
  currency: string;
  reason: TransactionReason;
  paymentInformation: string | null;
  hallencard?: Hallencard | null;
  reservation?: Reservation | null;
  reservationId: string | null;
  abonnement?: Abonnement | null;
  abonnementId: string | null;
  createdAt: Date;
  deleted: boolean;
}

export interface Season {
  id: number;
  name: string;
  shortName: string;
  starting: Date;
  ending: Date;
  current: boolean;
  teams?: TeamSeason[];
  players?: TeamMember[];
}

export interface Team {
  id: number;
  name: string;
  shortName: string;
  category: TeamCategory;
  orderNumber: number;
  teamSeasons?: TeamSeason[];
  members?: TeamMember[];
}

export interface TeamSeason {
  team?: Team;
  teamId: number;
  season?: Season;
  seasonId: number;
  teamLeader?: User | null;
  teamLeaderId: string | null;
  nuGroupId: string;
  nuTeamId: string;
  leagueName: string;
}

export interface TeamMember {
  user?: User;
  userId: string;
  team?: Team;
  teamId: number;
  season?: Season;
  seasonId: number;
}

export interface Notification {
  id: string;
  title: string;
  message: string | null;
  severity: NotificationSeverity;
  showFrom: Date;
  showTo: Date;
}

export interface Benefit {
  id: string;
  title: string;
  description: string | null;
  image: string | null;
  cover: boolean;
  link: string | null;
  activeFrom: Date | null;
  activeTo: Date | null;
}

export interface ControlInterface {
  id: string;
  title: string;
  description: string;
  preBooking: number;
  postBooking: number;
  connectByAnd: boolean;
  connectByOr: boolean;
  affectedCourts?: Court[];
}

export interface Organisation {
  id: string;
  slug: string;
  title: string;
  members?: OrganisationMember[];
}

export interface OrganisationMember {
  id: string;
  fullName: string;
  function: string | null;
  image: string | null;
  email: string | null;
  phone: string | null;
  orderID: number | null;
  organisation?: Organisation;
  organisationId: string;
  parentMember?: OrganisationMember | null;
  parentMemberId: string | null;
  childMembers?: OrganisationMember[];
}

export interface EventCategory {
  id: string;
  slug: string;
  title: string;
  events?: Event[];
}

export interface Event {
  id: string;
  title: string;
  description: string | null;
  image: string | null;
  start: Date;
  end: Date | null;
  canceled: boolean;
  revised: boolean;
  link: string | null;
  location: string | null;
  category?: EventCategory;
  categoryId: string;
  likedByUsers?: User[];
}
